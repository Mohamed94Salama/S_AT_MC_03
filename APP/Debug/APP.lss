
APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00001af2  00001b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800094  00800094  00001bba  2**0
                  ALLOC
  3 .stab         000020e8  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bd0  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <main>
      8a:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PWM_Init>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	80 91 61 00 	lds	r24, 0x0061
      9e:	88 23       	and	r24, r24
      a0:	09 f0       	breq	.+2      	; 0xa4 <PWM_Init+0x12>
      a2:	4a c0       	rjmp	.+148    	; 0x138 <PWM_Init+0xa6>
      a4:	80 91 62 00 	lds	r24, 0x0062
      a8:	88 23       	and	r24, r24
      aa:	79 f4       	brne	.+30     	; 0xca <PWM_Init+0x38>
      ac:	a3 e5       	ldi	r26, 0x53	; 83
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	e3 e5       	ldi	r30, 0x53	; 83
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	80 64       	ori	r24, 0x40	; 64
      b8:	8c 93       	st	X, r24
      ba:	a3 e5       	ldi	r26, 0x53	; 83
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	e3 e5       	ldi	r30, 0x53	; 83
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	88 60       	ori	r24, 0x08	; 8
      c6:	8c 93       	st	X, r24
      c8:	12 c0       	rjmp	.+36     	; 0xee <PWM_Init+0x5c>
      ca:	80 91 62 00 	lds	r24, 0x0062
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	71 f4       	brne	.+28     	; 0xee <PWM_Init+0x5c>
      d2:	a3 e5       	ldi	r26, 0x53	; 83
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	e3 e5       	ldi	r30, 0x53	; 83
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 64       	ori	r24, 0x40	; 64
      de:	8c 93       	st	X, r24
      e0:	a3 e5       	ldi	r26, 0x53	; 83
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	e3 e5       	ldi	r30, 0x53	; 83
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	87 7f       	andi	r24, 0xF7	; 247
      ec:	8c 93       	st	X, r24
      ee:	80 91 65 00 	lds	r24, 0x0065
      f2:	88 23       	and	r24, r24
      f4:	79 f4       	brne	.+30     	; 0x114 <PWM_Init+0x82>
      f6:	a3 e5       	ldi	r26, 0x53	; 83
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e3 e5       	ldi	r30, 0x53	; 83
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	80 81       	ld	r24, Z
     100:	8f 7e       	andi	r24, 0xEF	; 239
     102:	8c 93       	st	X, r24
     104:	a3 e5       	ldi	r26, 0x53	; 83
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e3 e5       	ldi	r30, 0x53	; 83
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 81       	ld	r24, Z
     10e:	80 62       	ori	r24, 0x20	; 32
     110:	8c 93       	st	X, r24
     112:	12 c0       	rjmp	.+36     	; 0x138 <PWM_Init+0xa6>
     114:	80 91 65 00 	lds	r24, 0x0065
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	71 f4       	brne	.+28     	; 0x138 <PWM_Init+0xa6>
     11c:	a3 e5       	ldi	r26, 0x53	; 83
     11e:	b0 e0       	ldi	r27, 0x00	; 0
     120:	e3 e5       	ldi	r30, 0x53	; 83
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	80 61       	ori	r24, 0x10	; 16
     128:	8c 93       	st	X, r24
     12a:	a3 e5       	ldi	r26, 0x53	; 83
     12c:	b0 e0       	ldi	r27, 0x00	; 0
     12e:	e3 e5       	ldi	r30, 0x53	; 83
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	80 62       	ori	r24, 0x20	; 32
     136:	8c 93       	st	X, r24
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	cf 91       	pop	r28
     13c:	df 91       	pop	r29
     13e:	08 95       	ret

00000140 <setPrescaler>:
	return E_OK;
}//end PWM_Init

//private function to set prescaler
static void setPrescaler(void)
{
     140:	df 93       	push	r29
     142:	cf 93       	push	r28
     144:	00 d0       	rcall	.+0      	; 0x146 <setPrescaler+0x6>
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
	switch(strpwmConfig.enuPWMPrescal)
     14a:	80 91 63 00 	lds	r24, 0x0063
     14e:	28 2f       	mov	r18, r24
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	3a 83       	std	Y+2, r19	; 0x02
     154:	29 83       	std	Y+1, r18	; 0x01
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	9a 81       	ldd	r25, Y+2	; 0x02
     15a:	83 30       	cpi	r24, 0x03	; 3
     15c:	91 05       	cpc	r25, r1
     15e:	09 f4       	brne	.+2      	; 0x162 <setPrescaler+0x22>
     160:	70 c0       	rjmp	.+224    	; 0x242 <setPrescaler+0x102>
     162:	29 81       	ldd	r18, Y+1	; 0x01
     164:	3a 81       	ldd	r19, Y+2	; 0x02
     166:	24 30       	cpi	r18, 0x04	; 4
     168:	31 05       	cpc	r19, r1
     16a:	84 f4       	brge	.+32     	; 0x18c <setPrescaler+0x4c>
     16c:	89 81       	ldd	r24, Y+1	; 0x01
     16e:	9a 81       	ldd	r25, Y+2	; 0x02
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	91 05       	cpc	r25, r1
     174:	d1 f1       	breq	.+116    	; 0x1ea <setPrescaler+0xaa>
     176:	29 81       	ldd	r18, Y+1	; 0x01
     178:	3a 81       	ldd	r19, Y+2	; 0x02
     17a:	22 30       	cpi	r18, 0x02	; 2
     17c:	31 05       	cpc	r19, r1
     17e:	0c f0       	brlt	.+2      	; 0x182 <setPrescaler+0x42>
     180:	4a c0       	rjmp	.+148    	; 0x216 <setPrescaler+0xd6>
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	9a 81       	ldd	r25, Y+2	; 0x02
     186:	00 97       	sbiw	r24, 0x00	; 0
     188:	d1 f0       	breq	.+52     	; 0x1be <setPrescaler+0x7e>
     18a:	c8 c0       	rjmp	.+400    	; 0x31c <setPrescaler+0x1dc>
     18c:	29 81       	ldd	r18, Y+1	; 0x01
     18e:	3a 81       	ldd	r19, Y+2	; 0x02
     190:	25 30       	cpi	r18, 0x05	; 5
     192:	31 05       	cpc	r19, r1
     194:	09 f4       	brne	.+2      	; 0x198 <setPrescaler+0x58>
     196:	81 c0       	rjmp	.+258    	; 0x29a <setPrescaler+0x15a>
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	9a 81       	ldd	r25, Y+2	; 0x02
     19c:	85 30       	cpi	r24, 0x05	; 5
     19e:	91 05       	cpc	r25, r1
     1a0:	0c f4       	brge	.+2      	; 0x1a4 <setPrescaler+0x64>
     1a2:	65 c0       	rjmp	.+202    	; 0x26e <setPrescaler+0x12e>
     1a4:	29 81       	ldd	r18, Y+1	; 0x01
     1a6:	3a 81       	ldd	r19, Y+2	; 0x02
     1a8:	26 30       	cpi	r18, 0x06	; 6
     1aa:	31 05       	cpc	r19, r1
     1ac:	09 f4       	brne	.+2      	; 0x1b0 <setPrescaler+0x70>
     1ae:	8b c0       	rjmp	.+278    	; 0x2c6 <setPrescaler+0x186>
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	9a 81       	ldd	r25, Y+2	; 0x02
     1b4:	87 30       	cpi	r24, 0x07	; 7
     1b6:	91 05       	cpc	r25, r1
     1b8:	09 f4       	brne	.+2      	; 0x1bc <setPrescaler+0x7c>
     1ba:	9b c0       	rjmp	.+310    	; 0x2f2 <setPrescaler+0x1b2>
     1bc:	af c0       	rjmp	.+350    	; 0x31c <setPrescaler+0x1dc>
	{
	case NO_CLOCK:
		CLR_BIT(TCCR0_R, CS00_BIT);
     1be:	a3 e5       	ldi	r26, 0x53	; 83
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
     1c2:	e3 e5       	ldi	r30, 0x53	; 83
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	80 81       	ld	r24, Z
     1c8:	8e 7f       	andi	r24, 0xFE	; 254
     1ca:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
     1cc:	a3 e5       	ldi	r26, 0x53	; 83
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	e3 e5       	ldi	r30, 0x53	; 83
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	8d 7f       	andi	r24, 0xFD	; 253
     1d8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
     1da:	a3 e5       	ldi	r26, 0x53	; 83
     1dc:	b0 e0       	ldi	r27, 0x00	; 0
     1de:	e3 e5       	ldi	r30, 0x53	; 83
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	80 81       	ld	r24, Z
     1e4:	8b 7f       	andi	r24, 0xFB	; 251
     1e6:	8c 93       	st	X, r24
     1e8:	99 c0       	rjmp	.+306    	; 0x31c <setPrescaler+0x1dc>
		break;
	case NO_PRESCALER:
		SET_BIT(TCCR0_R, CS00_BIT);
     1ea:	a3 e5       	ldi	r26, 0x53	; 83
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e3 e5       	ldi	r30, 0x53	; 83
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	81 60       	ori	r24, 0x01	; 1
     1f6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
     1f8:	a3 e5       	ldi	r26, 0x53	; 83
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	e3 e5       	ldi	r30, 0x53	; 83
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	8d 7f       	andi	r24, 0xFD	; 253
     204:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
     206:	a3 e5       	ldi	r26, 0x53	; 83
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	e3 e5       	ldi	r30, 0x53	; 83
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	8b 7f       	andi	r24, 0xFB	; 251
     212:	8c 93       	st	X, r24
     214:	83 c0       	rjmp	.+262    	; 0x31c <setPrescaler+0x1dc>
		break;
	case PRESCALER_8:
		CLR_BIT(TCCR0_R, CS00_BIT);
     216:	a3 e5       	ldi	r26, 0x53	; 83
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	e3 e5       	ldi	r30, 0x53	; 83
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8e 7f       	andi	r24, 0xFE	; 254
     222:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
     224:	a3 e5       	ldi	r26, 0x53	; 83
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e3 e5       	ldi	r30, 0x53	; 83
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	82 60       	ori	r24, 0x02	; 2
     230:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
     232:	a3 e5       	ldi	r26, 0x53	; 83
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e3 e5       	ldi	r30, 0x53	; 83
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	8b 7f       	andi	r24, 0xFB	; 251
     23e:	8c 93       	st	X, r24
     240:	6d c0       	rjmp	.+218    	; 0x31c <setPrescaler+0x1dc>
		break;
	case PRESCALER_64:
		SET_BIT(TCCR0_R, CS00_BIT);
     242:	a3 e5       	ldi	r26, 0x53	; 83
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e3 e5       	ldi	r30, 0x53	; 83
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	81 60       	ori	r24, 0x01	; 1
     24e:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
     250:	a3 e5       	ldi	r26, 0x53	; 83
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e3 e5       	ldi	r30, 0x53	; 83
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	82 60       	ori	r24, 0x02	; 2
     25c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
     25e:	a3 e5       	ldi	r26, 0x53	; 83
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	e3 e5       	ldi	r30, 0x53	; 83
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8b 7f       	andi	r24, 0xFB	; 251
     26a:	8c 93       	st	X, r24
     26c:	57 c0       	rjmp	.+174    	; 0x31c <setPrescaler+0x1dc>
		break;
	case PRESCALER_256:
		CLR_BIT(TCCR0_R, CS00_BIT);
     26e:	a3 e5       	ldi	r26, 0x53	; 83
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	e3 e5       	ldi	r30, 0x53	; 83
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	80 81       	ld	r24, Z
     278:	8e 7f       	andi	r24, 0xFE	; 254
     27a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
     27c:	a3 e5       	ldi	r26, 0x53	; 83
     27e:	b0 e0       	ldi	r27, 0x00	; 0
     280:	e3 e5       	ldi	r30, 0x53	; 83
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	8d 7f       	andi	r24, 0xFD	; 253
     288:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
     28a:	a3 e5       	ldi	r26, 0x53	; 83
     28c:	b0 e0       	ldi	r27, 0x00	; 0
     28e:	e3 e5       	ldi	r30, 0x53	; 83
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	84 60       	ori	r24, 0x04	; 4
     296:	8c 93       	st	X, r24
     298:	41 c0       	rjmp	.+130    	; 0x31c <setPrescaler+0x1dc>
		break;
	case PRESCALER_1024:
		SET_BIT(TCCR0_R, CS00_BIT);
     29a:	a3 e5       	ldi	r26, 0x53	; 83
     29c:	b0 e0       	ldi	r27, 0x00	; 0
     29e:	e3 e5       	ldi	r30, 0x53	; 83
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	81 60       	ori	r24, 0x01	; 1
     2a6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
     2a8:	a3 e5       	ldi	r26, 0x53	; 83
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	e3 e5       	ldi	r30, 0x53	; 83
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	80 81       	ld	r24, Z
     2b2:	8d 7f       	andi	r24, 0xFD	; 253
     2b4:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
     2b6:	a3 e5       	ldi	r26, 0x53	; 83
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	e3 e5       	ldi	r30, 0x53	; 83
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	84 60       	ori	r24, 0x04	; 4
     2c2:	8c 93       	st	X, r24
     2c4:	2b c0       	rjmp	.+86     	; 0x31c <setPrescaler+0x1dc>
		break;
	case EXTERNAL_CLOCK_FALL_EDGE:
		CLR_BIT(TCCR0_R, CS00_BIT);
     2c6:	a3 e5       	ldi	r26, 0x53	; 83
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	e3 e5       	ldi	r30, 0x53	; 83
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	8e 7f       	andi	r24, 0xFE	; 254
     2d2:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
     2d4:	a3 e5       	ldi	r26, 0x53	; 83
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	e3 e5       	ldi	r30, 0x53	; 83
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	82 60       	ori	r24, 0x02	; 2
     2e0:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
     2e2:	a3 e5       	ldi	r26, 0x53	; 83
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	e3 e5       	ldi	r30, 0x53	; 83
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	84 60       	ori	r24, 0x04	; 4
     2ee:	8c 93       	st	X, r24
     2f0:	15 c0       	rjmp	.+42     	; 0x31c <setPrescaler+0x1dc>
		break;
	case EXTERNAL_CLOCK_RISE_EDGE:
		SET_BIT(TCCR0_R, CS00_BIT);
     2f2:	a3 e5       	ldi	r26, 0x53	; 83
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	e3 e5       	ldi	r30, 0x53	; 83
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	81 60       	ori	r24, 0x01	; 1
     2fe:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
     300:	a3 e5       	ldi	r26, 0x53	; 83
     302:	b0 e0       	ldi	r27, 0x00	; 0
     304:	e3 e5       	ldi	r30, 0x53	; 83
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	80 81       	ld	r24, Z
     30a:	82 60       	ori	r24, 0x02	; 2
     30c:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
     30e:	a3 e5       	ldi	r26, 0x53	; 83
     310:	b0 e0       	ldi	r27, 0x00	; 0
     312:	e3 e5       	ldi	r30, 0x53	; 83
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	80 81       	ld	r24, Z
     318:	84 60       	ori	r24, 0x04	; 4
     31a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}//end switch for prescaler
}//end setPrescaler
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	cf 91       	pop	r28
     322:	df 91       	pop	r29
     324:	08 95       	ret

00000326 <PWM_Start>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to start generating PWM wave
*************************************************************************************************/
enuErrorStatus_t PWM_Start(uint8_t u8_Duty)
{
     326:	df 93       	push	r29
     328:	cf 93       	push	r28
     32a:	00 d0       	rcall	.+0      	; 0x32c <PWM_Start+0x6>
     32c:	0f 92       	push	r0
     32e:	cd b7       	in	r28, 0x3d	; 61
     330:	de b7       	in	r29, 0x3e	; 62
     332:	89 83       	std	Y+1, r24	; 0x01
	switch(strpwmConfig.enuOCMode)
     334:	80 91 65 00 	lds	r24, 0x0065
     338:	28 2f       	mov	r18, r24
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	3b 83       	std	Y+3, r19	; 0x03
     33e:	2a 83       	std	Y+2, r18	; 0x02
     340:	8a 81       	ldd	r24, Y+2	; 0x02
     342:	9b 81       	ldd	r25, Y+3	; 0x03
     344:	00 97       	sbiw	r24, 0x00	; 0
     346:	31 f0       	breq	.+12     	; 0x354 <PWM_Start+0x2e>
     348:	2a 81       	ldd	r18, Y+2	; 0x02
     34a:	3b 81       	ldd	r19, Y+3	; 0x03
     34c:	21 30       	cpi	r18, 0x01	; 1
     34e:	31 05       	cpc	r19, r1
     350:	e1 f0       	breq	.+56     	; 0x38a <PWM_Start+0x64>
     352:	2a c0       	rjmp	.+84     	; 0x3a8 <PWM_Start+0x82>
    {
    case NON_INVERTING:
        OCR0_R = ((u8_Duty *255)/100);
     354:	ec e5       	ldi	r30, 0x5C	; 92
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	48 2f       	mov	r20, r24
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	ca 01       	movw	r24, r20
     360:	9c 01       	movw	r18, r24
     362:	22 0f       	add	r18, r18
     364:	33 1f       	adc	r19, r19
     366:	c9 01       	movw	r24, r18
     368:	96 95       	lsr	r25
     36a:	98 2f       	mov	r25, r24
     36c:	88 27       	eor	r24, r24
     36e:	97 95       	ror	r25
     370:	87 95       	ror	r24
     372:	82 1b       	sub	r24, r18
     374:	93 0b       	sbc	r25, r19
     376:	84 0f       	add	r24, r20
     378:	95 1f       	adc	r25, r21
     37a:	24 e6       	ldi	r18, 0x64	; 100
     37c:	30 e0       	ldi	r19, 0x00	; 0
     37e:	b9 01       	movw	r22, r18
     380:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodhi4>
     384:	cb 01       	movw	r24, r22
     386:	80 83       	st	Z, r24
     388:	0f c0       	rjmp	.+30     	; 0x3a8 <PWM_Start+0x82>
        break;
    case INVERTING:
        OCR0_R = 255 - ((256 * u8_Duty)/100);
     38a:	ec e5       	ldi	r30, 0x5C	; 92
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	88 2f       	mov	r24, r24
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	98 2f       	mov	r25, r24
     396:	88 27       	eor	r24, r24
     398:	24 e6       	ldi	r18, 0x64	; 100
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	b9 01       	movw	r22, r18
     39e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodhi4>
     3a2:	cb 01       	movw	r24, r22
     3a4:	80 95       	com	r24
     3a6:	80 83       	st	Z, r24
    break;
    }
    setPrescaler();
     3a8:	0e 94 a0 00 	call	0x140	; 0x140 <setPrescaler>
	return E_OK;
     3ac:	81 e0       	ldi	r24, 0x01	; 1
}//end PWM_Start
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	cf 91       	pop	r28
     3b6:	df 91       	pop	r29
     3b8:	08 95       	ret

000003ba <PWM_Stop>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A stop generating PWM wave
*************************************************************************************************/
enuErrorStatus_t PWM_Stop(void)
{
     3ba:	df 93       	push	r29
     3bc:	cf 93       	push	r28
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
//	CLR_BIT(TCCR0_R, CS00_BIT);
//	CLR_BIT(TCCR0_R, CS01_BIT);
//	CLR_BIT(TCCR0_R, CS02_BIT);
	CLR_BIT(TCCR0_R, COM00_BIT);
     3c2:	a3 e5       	ldi	r26, 0x53	; 83
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	e3 e5       	ldi	r30, 0x53	; 83
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	8f 7e       	andi	r24, 0xEF	; 239
     3ce:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_R, COM01_BIT);
     3d0:	a3 e5       	ldi	r26, 0x53	; 83
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e3 e5       	ldi	r30, 0x53	; 83
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8f 7d       	andi	r24, 0xDF	; 223
     3dc:	8c 93       	st	X, r24
	return E_OK;
     3de:	81 e0       	ldi	r24, 0x01	; 1
}//end PWM_Stop
     3e0:	cf 91       	pop	r28
     3e2:	df 91       	pop	r29
     3e4:	08 95       	ret

000003e6 <DIO_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize all the DIO groups according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
     3e6:	df 93       	push	r29
     3e8:	cf 93       	push	r28
     3ea:	0f 92       	push	r0
     3ec:	cd b7       	in	r28, 0x3d	; 61
     3ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
     3f0:	19 82       	std	Y+1, r1	; 0x01
     3f2:	02 c4       	rjmp	.+2052   	; 0xbf8 <__stack+0x399>
	{
		//set the pin direction (input, output)
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT)
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	28 2f       	mov	r18, r24
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	c9 01       	movw	r24, r18
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	82 0f       	add	r24, r18
     402:	93 1f       	adc	r25, r19
     404:	fc 01       	movw	r30, r24
     406:	e9 59       	subi	r30, 0x99	; 153
     408:	ff 4f       	sbci	r31, 0xFF	; 255
     40a:	80 81       	ld	r24, Z
     40c:	88 23       	and	r24, r24
     40e:	09 f0       	breq	.+2      	; 0x412 <DIO_Init+0x2c>
     410:	ed c0       	rjmp	.+474    	; 0x5ec <DIO_Init+0x206>
		{
			//if PORTA
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	28 2f       	mov	r18, r24
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	c9 01       	movw	r24, r18
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	82 0f       	add	r24, r18
     420:	93 1f       	adc	r25, r19
     422:	fc 01       	movw	r30, r24
     424:	ea 59       	subi	r30, 0x9A	; 154
     426:	ff 4f       	sbci	r31, 0xFF	; 255
     428:	80 81       	ld	r24, Z
     42a:	88 30       	cpi	r24, 0x08	; 8
     42c:	00 f5       	brcc	.+64     	; 0x46e <DIO_Init+0x88>
			{
				CLR_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     42e:	aa e3       	ldi	r26, 0x3A	; 58
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ea e3       	ldi	r30, 0x3A	; 58
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	48 2f       	mov	r20, r24
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	28 2f       	mov	r18, r24
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	c9 01       	movw	r24, r18
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	82 0f       	add	r24, r18
     448:	93 1f       	adc	r25, r19
     44a:	fc 01       	movw	r30, r24
     44c:	ea 59       	subi	r30, 0x9A	; 154
     44e:	ff 4f       	sbci	r31, 0xFF	; 255
     450:	80 81       	ld	r24, Z
     452:	28 2f       	mov	r18, r24
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	02 2e       	mov	r0, r18
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_Init+0x7c>
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_Init+0x78>
     466:	80 95       	com	r24
     468:	84 23       	and	r24, r20
     46a:	8c 93       	st	X, r24
     46c:	b3 c1       	rjmp	.+870    	; 0x7d4 <DIO_Init+0x3ee>
			}//end if

			//if PORTB
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	28 2f       	mov	r18, r24
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	c9 01       	movw	r24, r18
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	82 0f       	add	r24, r18
     47c:	93 1f       	adc	r25, r19
     47e:	fc 01       	movw	r30, r24
     480:	ea 59       	subi	r30, 0x9A	; 154
     482:	ff 4f       	sbci	r31, 0xFF	; 255
     484:	80 81       	ld	r24, Z
     486:	88 30       	cpi	r24, 0x08	; 8
     488:	88 f1       	brcs	.+98     	; 0x4ec <DIO_Init+0x106>
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	28 2f       	mov	r18, r24
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	c9 01       	movw	r24, r18
     492:	88 0f       	add	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	82 0f       	add	r24, r18
     498:	93 1f       	adc	r25, r19
     49a:	fc 01       	movw	r30, r24
     49c:	ea 59       	subi	r30, 0x9A	; 154
     49e:	ff 4f       	sbci	r31, 0xFF	; 255
     4a0:	80 81       	ld	r24, Z
     4a2:	80 31       	cpi	r24, 0x10	; 16
     4a4:	18 f5       	brcc	.+70     	; 0x4ec <DIO_Init+0x106>
			{
				CLR_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     4a6:	a7 e3       	ldi	r26, 0x37	; 55
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	e7 e3       	ldi	r30, 0x37	; 55
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	48 2f       	mov	r20, r24
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	28 2f       	mov	r18, r24
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	c9 01       	movw	r24, r18
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	82 0f       	add	r24, r18
     4c0:	93 1f       	adc	r25, r19
     4c2:	fc 01       	movw	r30, r24
     4c4:	ea 59       	subi	r30, 0x9A	; 154
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	80 81       	ld	r24, Z
     4ca:	88 2f       	mov	r24, r24
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	9c 01       	movw	r18, r24
     4d0:	28 50       	subi	r18, 0x08	; 8
     4d2:	30 40       	sbci	r19, 0x00	; 0
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	02 2e       	mov	r0, r18
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_Init+0xfa>
     4dc:	88 0f       	add	r24, r24
     4de:	99 1f       	adc	r25, r25
     4e0:	0a 94       	dec	r0
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_Init+0xf6>
     4e4:	80 95       	com	r24
     4e6:	84 23       	and	r24, r20
     4e8:	8c 93       	st	X, r24
     4ea:	74 c1       	rjmp	.+744    	; 0x7d4 <DIO_Init+0x3ee>
			}//end else if

			//if PORTC
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	28 2f       	mov	r18, r24
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	c9 01       	movw	r24, r18
     4f4:	88 0f       	add	r24, r24
     4f6:	99 1f       	adc	r25, r25
     4f8:	82 0f       	add	r24, r18
     4fa:	93 1f       	adc	r25, r19
     4fc:	fc 01       	movw	r30, r24
     4fe:	ea 59       	subi	r30, 0x9A	; 154
     500:	ff 4f       	sbci	r31, 0xFF	; 255
     502:	80 81       	ld	r24, Z
     504:	80 31       	cpi	r24, 0x10	; 16
     506:	88 f1       	brcs	.+98     	; 0x56a <DIO_Init+0x184>
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	28 2f       	mov	r18, r24
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	c9 01       	movw	r24, r18
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	82 0f       	add	r24, r18
     516:	93 1f       	adc	r25, r19
     518:	fc 01       	movw	r30, r24
     51a:	ea 59       	subi	r30, 0x9A	; 154
     51c:	ff 4f       	sbci	r31, 0xFF	; 255
     51e:	80 81       	ld	r24, Z
     520:	88 31       	cpi	r24, 0x18	; 24
     522:	18 f5       	brcc	.+70     	; 0x56a <DIO_Init+0x184>
			{
				CLR_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     524:	a4 e3       	ldi	r26, 0x34	; 52
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e4 e3       	ldi	r30, 0x34	; 52
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	48 2f       	mov	r20, r24
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	28 2f       	mov	r18, r24
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	c9 01       	movw	r24, r18
     538:	88 0f       	add	r24, r24
     53a:	99 1f       	adc	r25, r25
     53c:	82 0f       	add	r24, r18
     53e:	93 1f       	adc	r25, r19
     540:	fc 01       	movw	r30, r24
     542:	ea 59       	subi	r30, 0x9A	; 154
     544:	ff 4f       	sbci	r31, 0xFF	; 255
     546:	80 81       	ld	r24, Z
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	9c 01       	movw	r18, r24
     54e:	20 51       	subi	r18, 0x10	; 16
     550:	30 40       	sbci	r19, 0x00	; 0
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	02 2e       	mov	r0, r18
     558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_Init+0x178>
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	0a 94       	dec	r0
     560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_Init+0x174>
     562:	80 95       	com	r24
     564:	84 23       	and	r24, r20
     566:	8c 93       	st	X, r24
     568:	35 c1       	rjmp	.+618    	; 0x7d4 <DIO_Init+0x3ee>
			}//end else if

			//if PORTD
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	28 2f       	mov	r18, r24
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	c9 01       	movw	r24, r18
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	82 0f       	add	r24, r18
     578:	93 1f       	adc	r25, r19
     57a:	fc 01       	movw	r30, r24
     57c:	ea 59       	subi	r30, 0x9A	; 154
     57e:	ff 4f       	sbci	r31, 0xFF	; 255
     580:	80 81       	ld	r24, Z
     582:	88 31       	cpi	r24, 0x18	; 24
     584:	08 f4       	brcc	.+2      	; 0x588 <DIO_Init+0x1a2>
     586:	26 c1       	rjmp	.+588    	; 0x7d4 <DIO_Init+0x3ee>
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	28 2f       	mov	r18, r24
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	c9 01       	movw	r24, r18
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	82 0f       	add	r24, r18
     596:	93 1f       	adc	r25, r19
     598:	fc 01       	movw	r30, r24
     59a:	ea 59       	subi	r30, 0x9A	; 154
     59c:	ff 4f       	sbci	r31, 0xFF	; 255
     59e:	80 81       	ld	r24, Z
     5a0:	80 32       	cpi	r24, 0x20	; 32
     5a2:	08 f0       	brcs	.+2      	; 0x5a6 <DIO_Init+0x1c0>
     5a4:	17 c1       	rjmp	.+558    	; 0x7d4 <DIO_Init+0x3ee>
			{
				CLR_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     5a6:	a1 e3       	ldi	r26, 0x31	; 49
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	e1 e3       	ldi	r30, 0x31	; 49
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	48 2f       	mov	r20, r24
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	28 2f       	mov	r18, r24
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	c9 01       	movw	r24, r18
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	82 0f       	add	r24, r18
     5c0:	93 1f       	adc	r25, r19
     5c2:	fc 01       	movw	r30, r24
     5c4:	ea 59       	subi	r30, 0x9A	; 154
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	80 81       	ld	r24, Z
     5ca:	88 2f       	mov	r24, r24
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	9c 01       	movw	r18, r24
     5d0:	28 51       	subi	r18, 0x18	; 24
     5d2:	30 40       	sbci	r19, 0x00	; 0
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	02 2e       	mov	r0, r18
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_Init+0x1fa>
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	0a 94       	dec	r0
     5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_Init+0x1f6>
     5e4:	80 95       	com	r24
     5e6:	84 23       	and	r24, r20
     5e8:	8c 93       	st	X, r24
     5ea:	f4 c0       	rjmp	.+488    	; 0x7d4 <DIO_Init+0x3ee>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == OUTPUT)
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	28 2f       	mov	r18, r24
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	c9 01       	movw	r24, r18
     5f4:	88 0f       	add	r24, r24
     5f6:	99 1f       	adc	r25, r25
     5f8:	82 0f       	add	r24, r18
     5fa:	93 1f       	adc	r25, r19
     5fc:	fc 01       	movw	r30, r24
     5fe:	e9 59       	subi	r30, 0x99	; 153
     600:	ff 4f       	sbci	r31, 0xFF	; 255
     602:	80 81       	ld	r24, Z
     604:	81 30       	cpi	r24, 0x01	; 1
     606:	09 f0       	breq	.+2      	; 0x60a <DIO_Init+0x224>
     608:	e5 c0       	rjmp	.+458    	; 0x7d4 <DIO_Init+0x3ee>
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	28 2f       	mov	r18, r24
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	c9 01       	movw	r24, r18
     612:	88 0f       	add	r24, r24
     614:	99 1f       	adc	r25, r25
     616:	82 0f       	add	r24, r18
     618:	93 1f       	adc	r25, r19
     61a:	fc 01       	movw	r30, r24
     61c:	ea 59       	subi	r30, 0x9A	; 154
     61e:	ff 4f       	sbci	r31, 0xFF	; 255
     620:	80 81       	ld	r24, Z
     622:	88 30       	cpi	r24, 0x08	; 8
     624:	f8 f4       	brcc	.+62     	; 0x664 <DIO_Init+0x27e>
			{
				SET_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     626:	aa e3       	ldi	r26, 0x3A	; 58
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	ea e3       	ldi	r30, 0x3A	; 58
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	80 81       	ld	r24, Z
     630:	48 2f       	mov	r20, r24
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	28 2f       	mov	r18, r24
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	c9 01       	movw	r24, r18
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	82 0f       	add	r24, r18
     640:	93 1f       	adc	r25, r19
     642:	fc 01       	movw	r30, r24
     644:	ea 59       	subi	r30, 0x9A	; 154
     646:	ff 4f       	sbci	r31, 0xFF	; 255
     648:	80 81       	ld	r24, Z
     64a:	28 2f       	mov	r18, r24
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	02 2e       	mov	r0, r18
     654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_Init+0x274>
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	0a 94       	dec	r0
     65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_Init+0x270>
     65e:	84 2b       	or	r24, r20
     660:	8c 93       	st	X, r24
     662:	b8 c0       	rjmp	.+368    	; 0x7d4 <DIO_Init+0x3ee>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	28 2f       	mov	r18, r24
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	c9 01       	movw	r24, r18
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	82 0f       	add	r24, r18
     672:	93 1f       	adc	r25, r19
     674:	fc 01       	movw	r30, r24
     676:	ea 59       	subi	r30, 0x9A	; 154
     678:	ff 4f       	sbci	r31, 0xFF	; 255
     67a:	80 81       	ld	r24, Z
     67c:	88 30       	cpi	r24, 0x08	; 8
     67e:	80 f1       	brcs	.+96     	; 0x6e0 <DIO_Init+0x2fa>
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	28 2f       	mov	r18, r24
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	c9 01       	movw	r24, r18
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	82 0f       	add	r24, r18
     68e:	93 1f       	adc	r25, r19
     690:	fc 01       	movw	r30, r24
     692:	ea 59       	subi	r30, 0x9A	; 154
     694:	ff 4f       	sbci	r31, 0xFF	; 255
     696:	80 81       	ld	r24, Z
     698:	80 31       	cpi	r24, 0x10	; 16
     69a:	10 f5       	brcc	.+68     	; 0x6e0 <DIO_Init+0x2fa>
			{
				SET_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     69c:	a7 e3       	ldi	r26, 0x37	; 55
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	e7 e3       	ldi	r30, 0x37	; 55
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	48 2f       	mov	r20, r24
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	28 2f       	mov	r18, r24
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	c9 01       	movw	r24, r18
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	82 0f       	add	r24, r18
     6b6:	93 1f       	adc	r25, r19
     6b8:	fc 01       	movw	r30, r24
     6ba:	ea 59       	subi	r30, 0x9A	; 154
     6bc:	ff 4f       	sbci	r31, 0xFF	; 255
     6be:	80 81       	ld	r24, Z
     6c0:	88 2f       	mov	r24, r24
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9c 01       	movw	r18, r24
     6c6:	28 50       	subi	r18, 0x08	; 8
     6c8:	30 40       	sbci	r19, 0x00	; 0
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	02 2e       	mov	r0, r18
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <DIO_Init+0x2f0>
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	0a 94       	dec	r0
     6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <DIO_Init+0x2ec>
     6da:	84 2b       	or	r24, r20
     6dc:	8c 93       	st	X, r24
     6de:	7a c0       	rjmp	.+244    	; 0x7d4 <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     6e0:	89 81       	ldd	r24, Y+1	; 0x01
     6e2:	28 2f       	mov	r18, r24
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	c9 01       	movw	r24, r18
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	82 0f       	add	r24, r18
     6ee:	93 1f       	adc	r25, r19
     6f0:	fc 01       	movw	r30, r24
     6f2:	ea 59       	subi	r30, 0x9A	; 154
     6f4:	ff 4f       	sbci	r31, 0xFF	; 255
     6f6:	80 81       	ld	r24, Z
     6f8:	80 31       	cpi	r24, 0x10	; 16
     6fa:	80 f1       	brcs	.+96     	; 0x75c <DIO_Init+0x376>
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	28 2f       	mov	r18, r24
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	c9 01       	movw	r24, r18
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	82 0f       	add	r24, r18
     70a:	93 1f       	adc	r25, r19
     70c:	fc 01       	movw	r30, r24
     70e:	ea 59       	subi	r30, 0x9A	; 154
     710:	ff 4f       	sbci	r31, 0xFF	; 255
     712:	80 81       	ld	r24, Z
     714:	88 31       	cpi	r24, 0x18	; 24
     716:	10 f5       	brcc	.+68     	; 0x75c <DIO_Init+0x376>
			{
				SET_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     718:	a4 e3       	ldi	r26, 0x34	; 52
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	e4 e3       	ldi	r30, 0x34	; 52
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	48 2f       	mov	r20, r24
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	28 2f       	mov	r18, r24
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	c9 01       	movw	r24, r18
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	82 0f       	add	r24, r18
     732:	93 1f       	adc	r25, r19
     734:	fc 01       	movw	r30, r24
     736:	ea 59       	subi	r30, 0x9A	; 154
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	80 81       	ld	r24, Z
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	9c 01       	movw	r18, r24
     742:	20 51       	subi	r18, 0x10	; 16
     744:	30 40       	sbci	r19, 0x00	; 0
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	02 2e       	mov	r0, r18
     74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_Init+0x36c>
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	0a 94       	dec	r0
     754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_Init+0x368>
     756:	84 2b       	or	r24, r20
     758:	8c 93       	st	X, r24
     75a:	3c c0       	rjmp	.+120    	; 0x7d4 <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	28 2f       	mov	r18, r24
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	c9 01       	movw	r24, r18
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	82 0f       	add	r24, r18
     76a:	93 1f       	adc	r25, r19
     76c:	fc 01       	movw	r30, r24
     76e:	ea 59       	subi	r30, 0x9A	; 154
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	80 81       	ld	r24, Z
     774:	88 31       	cpi	r24, 0x18	; 24
     776:	70 f1       	brcs	.+92     	; 0x7d4 <DIO_Init+0x3ee>
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	28 2f       	mov	r18, r24
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	c9 01       	movw	r24, r18
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	fc 01       	movw	r30, r24
     78a:	ea 59       	subi	r30, 0x9A	; 154
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	80 81       	ld	r24, Z
     790:	80 32       	cpi	r24, 0x20	; 32
     792:	00 f5       	brcc	.+64     	; 0x7d4 <DIO_Init+0x3ee>
			{
				SET_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     794:	a1 e3       	ldi	r26, 0x31	; 49
     796:	b0 e0       	ldi	r27, 0x00	; 0
     798:	e1 e3       	ldi	r30, 0x31	; 49
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	48 2f       	mov	r20, r24
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	28 2f       	mov	r18, r24
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	c9 01       	movw	r24, r18
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	82 0f       	add	r24, r18
     7ae:	93 1f       	adc	r25, r19
     7b0:	fc 01       	movw	r30, r24
     7b2:	ea 59       	subi	r30, 0x9A	; 154
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	80 81       	ld	r24, Z
     7b8:	88 2f       	mov	r24, r24
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	9c 01       	movw	r18, r24
     7be:	28 51       	subi	r18, 0x18	; 24
     7c0:	30 40       	sbci	r19, 0x00	; 0
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_Init+0x3e6>
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	2a 95       	dec	r18
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_Init+0x3e2>
     7d0:	84 2b       	or	r24, r20
     7d2:	8c 93       	st	X, r24
			}//end else if
		}//end else if

		//enable or disable pull-up resistor
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
     7d4:	89 81       	ldd	r24, Y+1	; 0x01
     7d6:	28 2f       	mov	r18, r24
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	c9 01       	movw	r24, r18
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	82 0f       	add	r24, r18
     7e2:	93 1f       	adc	r25, r19
     7e4:	fc 01       	movw	r30, r24
     7e6:	e9 59       	subi	r30, 0x99	; 153
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	80 81       	ld	r24, Z
     7ec:	88 23       	and	r24, r24
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <DIO_Init+0x40c>
     7f0:	fc c0       	rjmp	.+504    	; 0x9ea <__stack+0x18b>
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	28 2f       	mov	r18, r24
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	c9 01       	movw	r24, r18
     7fa:	88 0f       	add	r24, r24
     7fc:	99 1f       	adc	r25, r25
     7fe:	82 0f       	add	r24, r18
     800:	93 1f       	adc	r25, r19
     802:	fc 01       	movw	r30, r24
     804:	e8 59       	subi	r30, 0x98	; 152
     806:	ff 4f       	sbci	r31, 0xFF	; 255
     808:	80 81       	ld	r24, Z
     80a:	88 23       	and	r24, r24
     80c:	09 f0       	breq	.+2      	; 0x810 <DIO_Init+0x42a>
     80e:	ed c0       	rjmp	.+474    	; 0x9ea <__stack+0x18b>
		   astrDIOConfigParameters[u8_i].enuPullupResEn == NO_CONNECTION)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	28 2f       	mov	r18, r24
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	c9 01       	movw	r24, r18
     818:	88 0f       	add	r24, r24
     81a:	99 1f       	adc	r25, r25
     81c:	82 0f       	add	r24, r18
     81e:	93 1f       	adc	r25, r19
     820:	fc 01       	movw	r30, r24
     822:	ea 59       	subi	r30, 0x9A	; 154
     824:	ff 4f       	sbci	r31, 0xFF	; 255
     826:	80 81       	ld	r24, Z
     828:	88 30       	cpi	r24, 0x08	; 8
     82a:	00 f5       	brcc	.+64     	; 0x86c <__stack+0xd>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     82c:	ab e3       	ldi	r26, 0x3B	; 59
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	eb e3       	ldi	r30, 0x3B	; 59
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	48 2f       	mov	r20, r24
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	28 2f       	mov	r18, r24
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	c9 01       	movw	r24, r18
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	82 0f       	add	r24, r18
     846:	93 1f       	adc	r25, r19
     848:	fc 01       	movw	r30, r24
     84a:	ea 59       	subi	r30, 0x9A	; 154
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	80 81       	ld	r24, Z
     850:	28 2f       	mov	r18, r24
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	02 2e       	mov	r0, r18
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	0a 94       	dec	r0
     862:	e2 f7       	brpl	.-8      	; 0x85c <DIO_Init+0x476>
     864:	80 95       	com	r24
     866:	84 23       	and	r24, r20
     868:	8c 93       	st	X, r24
     86a:	c3 c1       	rjmp	.+902    	; 0xbf2 <__stack+0x393>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	28 2f       	mov	r18, r24
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	c9 01       	movw	r24, r18
     874:	88 0f       	add	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	82 0f       	add	r24, r18
     87a:	93 1f       	adc	r25, r19
     87c:	fc 01       	movw	r30, r24
     87e:	ea 59       	subi	r30, 0x9A	; 154
     880:	ff 4f       	sbci	r31, 0xFF	; 255
     882:	80 81       	ld	r24, Z
     884:	88 30       	cpi	r24, 0x08	; 8
     886:	88 f1       	brcs	.+98     	; 0x8ea <__stack+0x8b>
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	28 2f       	mov	r18, r24
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	c9 01       	movw	r24, r18
     890:	88 0f       	add	r24, r24
     892:	99 1f       	adc	r25, r25
     894:	82 0f       	add	r24, r18
     896:	93 1f       	adc	r25, r19
     898:	fc 01       	movw	r30, r24
     89a:	ea 59       	subi	r30, 0x9A	; 154
     89c:	ff 4f       	sbci	r31, 0xFF	; 255
     89e:	80 81       	ld	r24, Z
     8a0:	80 31       	cpi	r24, 0x10	; 16
     8a2:	18 f5       	brcc	.+70     	; 0x8ea <__stack+0x8b>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     8a4:	a8 e3       	ldi	r26, 0x38	; 56
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	e8 e3       	ldi	r30, 0x38	; 56
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	80 81       	ld	r24, Z
     8ae:	48 2f       	mov	r20, r24
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	28 2f       	mov	r18, r24
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	c9 01       	movw	r24, r18
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	82 0f       	add	r24, r18
     8be:	93 1f       	adc	r25, r19
     8c0:	fc 01       	movw	r30, r24
     8c2:	ea 59       	subi	r30, 0x9A	; 154
     8c4:	ff 4f       	sbci	r31, 0xFF	; 255
     8c6:	80 81       	ld	r24, Z
     8c8:	88 2f       	mov	r24, r24
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	9c 01       	movw	r18, r24
     8ce:	28 50       	subi	r18, 0x08	; 8
     8d0:	30 40       	sbci	r19, 0x00	; 0
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	02 2e       	mov	r0, r18
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	0a 94       	dec	r0
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <__stack+0x7b>
     8e2:	80 95       	com	r24
     8e4:	84 23       	and	r24, r20
     8e6:	8c 93       	st	X, r24
     8e8:	84 c1       	rjmp	.+776    	; 0xbf2 <__stack+0x393>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	28 2f       	mov	r18, r24
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	c9 01       	movw	r24, r18
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	82 0f       	add	r24, r18
     8f8:	93 1f       	adc	r25, r19
     8fa:	fc 01       	movw	r30, r24
     8fc:	ea 59       	subi	r30, 0x9A	; 154
     8fe:	ff 4f       	sbci	r31, 0xFF	; 255
     900:	80 81       	ld	r24, Z
     902:	80 31       	cpi	r24, 0x10	; 16
     904:	88 f1       	brcs	.+98     	; 0x968 <__stack+0x109>
     906:	89 81       	ldd	r24, Y+1	; 0x01
     908:	28 2f       	mov	r18, r24
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	c9 01       	movw	r24, r18
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	82 0f       	add	r24, r18
     914:	93 1f       	adc	r25, r19
     916:	fc 01       	movw	r30, r24
     918:	ea 59       	subi	r30, 0x9A	; 154
     91a:	ff 4f       	sbci	r31, 0xFF	; 255
     91c:	80 81       	ld	r24, Z
     91e:	88 31       	cpi	r24, 0x18	; 24
     920:	18 f5       	brcc	.+70     	; 0x968 <__stack+0x109>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     922:	a5 e3       	ldi	r26, 0x35	; 53
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	e5 e3       	ldi	r30, 0x35	; 53
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	48 2f       	mov	r20, r24
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	28 2f       	mov	r18, r24
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	c9 01       	movw	r24, r18
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	82 0f       	add	r24, r18
     93c:	93 1f       	adc	r25, r19
     93e:	fc 01       	movw	r30, r24
     940:	ea 59       	subi	r30, 0x9A	; 154
     942:	ff 4f       	sbci	r31, 0xFF	; 255
     944:	80 81       	ld	r24, Z
     946:	88 2f       	mov	r24, r24
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	9c 01       	movw	r18, r24
     94c:	20 51       	subi	r18, 0x10	; 16
     94e:	30 40       	sbci	r19, 0x00	; 0
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	02 2e       	mov	r0, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0xfd>
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <__stack+0xf9>
     960:	80 95       	com	r24
     962:	84 23       	and	r24, r20
     964:	8c 93       	st	X, r24
     966:	45 c1       	rjmp	.+650    	; 0xbf2 <__stack+0x393>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	28 2f       	mov	r18, r24
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	c9 01       	movw	r24, r18
     970:	88 0f       	add	r24, r24
     972:	99 1f       	adc	r25, r25
     974:	82 0f       	add	r24, r18
     976:	93 1f       	adc	r25, r19
     978:	fc 01       	movw	r30, r24
     97a:	ea 59       	subi	r30, 0x9A	; 154
     97c:	ff 4f       	sbci	r31, 0xFF	; 255
     97e:	80 81       	ld	r24, Z
     980:	88 31       	cpi	r24, 0x18	; 24
     982:	08 f4       	brcc	.+2      	; 0x986 <__stack+0x127>
     984:	36 c1       	rjmp	.+620    	; 0xbf2 <__stack+0x393>
     986:	89 81       	ldd	r24, Y+1	; 0x01
     988:	28 2f       	mov	r18, r24
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	c9 01       	movw	r24, r18
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	82 0f       	add	r24, r18
     994:	93 1f       	adc	r25, r19
     996:	fc 01       	movw	r30, r24
     998:	ea 59       	subi	r30, 0x9A	; 154
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	80 81       	ld	r24, Z
     99e:	80 32       	cpi	r24, 0x20	; 32
     9a0:	08 f0       	brcs	.+2      	; 0x9a4 <__stack+0x145>
     9a2:	27 c1       	rjmp	.+590    	; 0xbf2 <__stack+0x393>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     9a4:	a2 e3       	ldi	r26, 0x32	; 50
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e2 e3       	ldi	r30, 0x32	; 50
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	48 2f       	mov	r20, r24
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	c9 01       	movw	r24, r18
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	fc 01       	movw	r30, r24
     9c2:	ea 59       	subi	r30, 0x9A	; 154
     9c4:	ff 4f       	sbci	r31, 0xFF	; 255
     9c6:	80 81       	ld	r24, Z
     9c8:	88 2f       	mov	r24, r24
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	9c 01       	movw	r18, r24
     9ce:	28 51       	subi	r18, 0x18	; 24
     9d0:	30 40       	sbci	r19, 0x00	; 0
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	02 2e       	mov	r0, r18
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0x17f>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	0a 94       	dec	r0
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <__stack+0x17b>
     9e2:	80 95       	com	r24
     9e4:	84 23       	and	r24, r20
     9e6:	8c 93       	st	X, r24
     9e8:	04 c1       	rjmp	.+520    	; 0xbf2 <__stack+0x393>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	28 2f       	mov	r18, r24
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	c9 01       	movw	r24, r18
     9f2:	88 0f       	add	r24, r24
     9f4:	99 1f       	adc	r25, r25
     9f6:	82 0f       	add	r24, r18
     9f8:	93 1f       	adc	r25, r19
     9fa:	fc 01       	movw	r30, r24
     9fc:	e9 59       	subi	r30, 0x99	; 153
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	80 81       	ld	r24, Z
     a02:	88 23       	and	r24, r24
     a04:	09 f0       	breq	.+2      	; 0xa08 <__stack+0x1a9>
     a06:	f5 c0       	rjmp	.+490    	; 0xbf2 <__stack+0x393>
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	28 2f       	mov	r18, r24
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	c9 01       	movw	r24, r18
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	82 0f       	add	r24, r18
     a16:	93 1f       	adc	r25, r19
     a18:	fc 01       	movw	r30, r24
     a1a:	e8 59       	subi	r30, 0x98	; 152
     a1c:	ff 4f       	sbci	r31, 0xFF	; 255
     a1e:	80 81       	ld	r24, Z
     a20:	81 30       	cpi	r24, 0x01	; 1
     a22:	09 f0       	breq	.+2      	; 0xa26 <__stack+0x1c7>
     a24:	e6 c0       	rjmp	.+460    	; 0xbf2 <__stack+0x393>
				astrDIOConfigParameters[u8_i].enuPullupResEn == PULL_UP_ENABLE)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	28 2f       	mov	r18, r24
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	c9 01       	movw	r24, r18
     a2e:	88 0f       	add	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	82 0f       	add	r24, r18
     a34:	93 1f       	adc	r25, r19
     a36:	fc 01       	movw	r30, r24
     a38:	ea 59       	subi	r30, 0x9A	; 154
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	80 81       	ld	r24, Z
     a3e:	88 30       	cpi	r24, 0x08	; 8
     a40:	f8 f4       	brcc	.+62     	; 0xa80 <__stack+0x221>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     a42:	ab e3       	ldi	r26, 0x3B	; 59
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	eb e3       	ldi	r30, 0x3B	; 59
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	80 81       	ld	r24, Z
     a4c:	48 2f       	mov	r20, r24
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	28 2f       	mov	r18, r24
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	c9 01       	movw	r24, r18
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	82 0f       	add	r24, r18
     a5c:	93 1f       	adc	r25, r19
     a5e:	fc 01       	movw	r30, r24
     a60:	ea 59       	subi	r30, 0x9A	; 154
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	80 81       	ld	r24, Z
     a66:	28 2f       	mov	r18, r24
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	02 2e       	mov	r0, r18
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <__stack+0x217>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	0a 94       	dec	r0
     a78:	e2 f7       	brpl	.-8      	; 0xa72 <__stack+0x213>
     a7a:	84 2b       	or	r24, r20
     a7c:	8c 93       	st	X, r24
     a7e:	b9 c0       	rjmp	.+370    	; 0xbf2 <__stack+0x393>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     a80:	89 81       	ldd	r24, Y+1	; 0x01
     a82:	28 2f       	mov	r18, r24
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	c9 01       	movw	r24, r18
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	82 0f       	add	r24, r18
     a8e:	93 1f       	adc	r25, r19
     a90:	fc 01       	movw	r30, r24
     a92:	ea 59       	subi	r30, 0x9A	; 154
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	88 30       	cpi	r24, 0x08	; 8
     a9a:	80 f1       	brcs	.+96     	; 0xafc <__stack+0x29d>
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	28 2f       	mov	r18, r24
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	c9 01       	movw	r24, r18
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	82 0f       	add	r24, r18
     aaa:	93 1f       	adc	r25, r19
     aac:	fc 01       	movw	r30, r24
     aae:	ea 59       	subi	r30, 0x9A	; 154
     ab0:	ff 4f       	sbci	r31, 0xFF	; 255
     ab2:	80 81       	ld	r24, Z
     ab4:	80 31       	cpi	r24, 0x10	; 16
     ab6:	10 f5       	brcc	.+68     	; 0xafc <__stack+0x29d>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     ab8:	a8 e3       	ldi	r26, 0x38	; 56
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	e8 e3       	ldi	r30, 0x38	; 56
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	48 2f       	mov	r20, r24
     ac4:	89 81       	ldd	r24, Y+1	; 0x01
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	c9 01       	movw	r24, r18
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	82 0f       	add	r24, r18
     ad2:	93 1f       	adc	r25, r19
     ad4:	fc 01       	movw	r30, r24
     ad6:	ea 59       	subi	r30, 0x9A	; 154
     ad8:	ff 4f       	sbci	r31, 0xFF	; 255
     ada:	80 81       	ld	r24, Z
     adc:	88 2f       	mov	r24, r24
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	9c 01       	movw	r18, r24
     ae2:	28 50       	subi	r18, 0x08	; 8
     ae4:	30 40       	sbci	r19, 0x00	; 0
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	02 2e       	mov	r0, r18
     aec:	02 c0       	rjmp	.+4      	; 0xaf2 <__stack+0x293>
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	0a 94       	dec	r0
     af4:	e2 f7       	brpl	.-8      	; 0xaee <__stack+0x28f>
     af6:	84 2b       	or	r24, r20
     af8:	8c 93       	st	X, r24
     afa:	7b c0       	rjmp	.+246    	; 0xbf2 <__stack+0x393>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	28 2f       	mov	r18, r24
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	c9 01       	movw	r24, r18
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	82 0f       	add	r24, r18
     b0a:	93 1f       	adc	r25, r19
     b0c:	fc 01       	movw	r30, r24
     b0e:	ea 59       	subi	r30, 0x9A	; 154
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	80 81       	ld	r24, Z
     b14:	80 31       	cpi	r24, 0x10	; 16
     b16:	80 f1       	brcs	.+96     	; 0xb78 <__stack+0x319>
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	c9 01       	movw	r24, r18
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	82 0f       	add	r24, r18
     b26:	93 1f       	adc	r25, r19
     b28:	fc 01       	movw	r30, r24
     b2a:	ea 59       	subi	r30, 0x9A	; 154
     b2c:	ff 4f       	sbci	r31, 0xFF	; 255
     b2e:	80 81       	ld	r24, Z
     b30:	88 31       	cpi	r24, 0x18	; 24
     b32:	10 f5       	brcc	.+68     	; 0xb78 <__stack+0x319>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     b34:	a5 e3       	ldi	r26, 0x35	; 53
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	e5 e3       	ldi	r30, 0x35	; 53
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	48 2f       	mov	r20, r24
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	28 2f       	mov	r18, r24
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	c9 01       	movw	r24, r18
     b48:	88 0f       	add	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	82 0f       	add	r24, r18
     b4e:	93 1f       	adc	r25, r19
     b50:	fc 01       	movw	r30, r24
     b52:	ea 59       	subi	r30, 0x9A	; 154
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 81       	ld	r24, Z
     b58:	88 2f       	mov	r24, r24
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	9c 01       	movw	r18, r24
     b5e:	20 51       	subi	r18, 0x10	; 16
     b60:	30 40       	sbci	r19, 0x00	; 0
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 2e       	mov	r0, r18
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <__stack+0x30f>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <__stack+0x30b>
     b72:	84 2b       	or	r24, r20
     b74:	8c 93       	st	X, r24
     b76:	3d c0       	rjmp	.+122    	; 0xbf2 <__stack+0x393>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	c9 01       	movw	r24, r18
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	82 0f       	add	r24, r18
     b86:	93 1f       	adc	r25, r19
     b88:	fc 01       	movw	r30, r24
     b8a:	ea 59       	subi	r30, 0x9A	; 154
     b8c:	ff 4f       	sbci	r31, 0xFF	; 255
     b8e:	80 81       	ld	r24, Z
     b90:	88 31       	cpi	r24, 0x18	; 24
     b92:	78 f1       	brcs	.+94     	; 0xbf2 <__stack+0x393>
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	c9 01       	movw	r24, r18
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	82 0f       	add	r24, r18
     ba2:	93 1f       	adc	r25, r19
     ba4:	fc 01       	movw	r30, r24
     ba6:	ea 59       	subi	r30, 0x9A	; 154
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	80 81       	ld	r24, Z
     bac:	80 32       	cpi	r24, 0x20	; 32
     bae:	08 f5       	brcc	.+66     	; 0xbf2 <__stack+0x393>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     bb0:	a2 e3       	ldi	r26, 0x32	; 50
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e2 e3       	ldi	r30, 0x32	; 50
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	48 2f       	mov	r20, r24
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	c9 01       	movw	r24, r18
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	82 0f       	add	r24, r18
     bca:	93 1f       	adc	r25, r19
     bcc:	fc 01       	movw	r30, r24
     bce:	ea 59       	subi	r30, 0x9A	; 154
     bd0:	ff 4f       	sbci	r31, 0xFF	; 255
     bd2:	80 81       	ld	r24, Z
     bd4:	88 2f       	mov	r24, r24
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	9c 01       	movw	r18, r24
     bda:	28 51       	subi	r18, 0x18	; 24
     bdc:	30 40       	sbci	r19, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	02 2e       	mov	r0, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <__stack+0x38b>
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	0a 94       	dec	r0
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <__stack+0x387>
     bee:	84 2b       	or	r24, r20
     bf0:	8c 93       	st	X, r24
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	8f 5f       	subi	r24, 0xFF	; 255
     bf6:	89 83       	std	Y+1, r24	; 0x01
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	8f 30       	cpi	r24, 0x0F	; 15
     bfc:	08 f4       	brcc	.+2      	; 0xc00 <__stack+0x3a1>
     bfe:	fa cb       	rjmp	.-2060   	; 0x3f4 <DIO_Init+0xe>
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
			}//end else if
		}//end else if

	}//end for
    return E_OK;
     c00:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_Init
     c02:	0f 90       	pop	r0
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <DIO_Write>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to write a digital value into the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8_GroupId, uint8_t u8_Data)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <DIO_Write+0x6>
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	6a 83       	std	Y+2, r22	; 0x02
//	if(DIO_Init() == E_ERROR)	return E_ERROR;
//	else{

		if (u8_Data == LOW)
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	88 23       	and	r24, r24
     c1c:	09 f0       	breq	.+2      	; 0xc20 <DIO_Write+0x16>
     c1e:	ed c0       	rjmp	.+474    	; 0xdfa <DIO_Write+0x1f0>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	c9 01       	movw	r24, r18
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	82 0f       	add	r24, r18
     c2e:	93 1f       	adc	r25, r19
     c30:	fc 01       	movw	r30, r24
     c32:	ea 59       	subi	r30, 0x9A	; 154
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	80 81       	ld	r24, Z
     c38:	88 30       	cpi	r24, 0x08	; 8
     c3a:	00 f5       	brcc	.+64     	; 0xc7c <DIO_Write+0x72>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
     c3c:	ab e3       	ldi	r26, 0x3B	; 59
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	eb e3       	ldi	r30, 0x3B	; 59
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	48 2f       	mov	r20, r24
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	c9 01       	movw	r24, r18
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	82 0f       	add	r24, r18
     c56:	93 1f       	adc	r25, r19
     c58:	fc 01       	movw	r30, r24
     c5a:	ea 59       	subi	r30, 0x9A	; 154
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	80 81       	ld	r24, Z
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 2e       	mov	r0, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <DIO_Write+0x66>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <DIO_Write+0x62>
     c74:	80 95       	com	r24
     c76:	84 23       	and	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	a9 c1       	rjmp	.+850    	; 0xfce <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	c9 01       	movw	r24, r18
     c84:	88 0f       	add	r24, r24
     c86:	99 1f       	adc	r25, r25
     c88:	82 0f       	add	r24, r18
     c8a:	93 1f       	adc	r25, r19
     c8c:	fc 01       	movw	r30, r24
     c8e:	ea 59       	subi	r30, 0x9A	; 154
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	80 81       	ld	r24, Z
     c94:	88 30       	cpi	r24, 0x08	; 8
     c96:	88 f1       	brcs	.+98     	; 0xcfa <DIO_Write+0xf0>
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	c9 01       	movw	r24, r18
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	82 0f       	add	r24, r18
     ca6:	93 1f       	adc	r25, r19
     ca8:	fc 01       	movw	r30, r24
     caa:	ea 59       	subi	r30, 0x9A	; 154
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	80 81       	ld	r24, Z
     cb0:	80 31       	cpi	r24, 0x10	; 16
     cb2:	18 f5       	brcc	.+70     	; 0xcfa <DIO_Write+0xf0>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
     cb4:	a8 e3       	ldi	r26, 0x38	; 56
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e8 e3       	ldi	r30, 0x38	; 56
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	48 2f       	mov	r20, r24
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	c9 01       	movw	r24, r18
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	82 0f       	add	r24, r18
     cce:	93 1f       	adc	r25, r19
     cd0:	fc 01       	movw	r30, r24
     cd2:	ea 59       	subi	r30, 0x9A	; 154
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	80 81       	ld	r24, Z
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9c 01       	movw	r18, r24
     cde:	28 50       	subi	r18, 0x08	; 8
     ce0:	30 40       	sbci	r19, 0x00	; 0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_Write+0xe4>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_Write+0xe0>
     cf2:	80 95       	com	r24
     cf4:	84 23       	and	r24, r20
     cf6:	8c 93       	st	X, r24
     cf8:	6a c1       	rjmp	.+724    	; 0xfce <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	c9 01       	movw	r24, r18
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	82 0f       	add	r24, r18
     d08:	93 1f       	adc	r25, r19
     d0a:	fc 01       	movw	r30, r24
     d0c:	ea 59       	subi	r30, 0x9A	; 154
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 81       	ld	r24, Z
     d12:	80 31       	cpi	r24, 0x10	; 16
     d14:	88 f1       	brcs	.+98     	; 0xd78 <DIO_Write+0x16e>
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	c9 01       	movw	r24, r18
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	82 0f       	add	r24, r18
     d24:	93 1f       	adc	r25, r19
     d26:	fc 01       	movw	r30, r24
     d28:	ea 59       	subi	r30, 0x9A	; 154
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 81       	ld	r24, Z
     d2e:	88 31       	cpi	r24, 0x18	; 24
     d30:	18 f5       	brcc	.+70     	; 0xd78 <DIO_Write+0x16e>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
     d32:	a5 e3       	ldi	r26, 0x35	; 53
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e5 e3       	ldi	r30, 0x35	; 53
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	c9 01       	movw	r24, r18
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	82 0f       	add	r24, r18
     d4c:	93 1f       	adc	r25, r19
     d4e:	fc 01       	movw	r30, r24
     d50:	ea 59       	subi	r30, 0x9A	; 154
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	80 81       	ld	r24, Z
     d56:	88 2f       	mov	r24, r24
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	9c 01       	movw	r18, r24
     d5c:	20 51       	subi	r18, 0x10	; 16
     d5e:	30 40       	sbci	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <DIO_Write+0x162>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <DIO_Write+0x15e>
     d70:	80 95       	com	r24
     d72:	84 23       	and	r24, r20
     d74:	8c 93       	st	X, r24
     d76:	2b c1       	rjmp	.+598    	; 0xfce <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	c9 01       	movw	r24, r18
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	82 0f       	add	r24, r18
     d86:	93 1f       	adc	r25, r19
     d88:	fc 01       	movw	r30, r24
     d8a:	ea 59       	subi	r30, 0x9A	; 154
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	80 81       	ld	r24, Z
     d90:	88 31       	cpi	r24, 0x18	; 24
     d92:	08 f4       	brcc	.+2      	; 0xd96 <DIO_Write+0x18c>
     d94:	1c c1       	rjmp	.+568    	; 0xfce <DIO_Write+0x3c4>
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	c9 01       	movw	r24, r18
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	82 0f       	add	r24, r18
     da4:	93 1f       	adc	r25, r19
     da6:	fc 01       	movw	r30, r24
     da8:	ea 59       	subi	r30, 0x9A	; 154
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	80 81       	ld	r24, Z
     dae:	80 32       	cpi	r24, 0x20	; 32
     db0:	08 f0       	brcs	.+2      	; 0xdb4 <DIO_Write+0x1aa>
     db2:	0d c1       	rjmp	.+538    	; 0xfce <DIO_Write+0x3c4>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
     db4:	a2 e3       	ldi	r26, 0x32	; 50
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e2 e3       	ldi	r30, 0x32	; 50
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	c9 01       	movw	r24, r18
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	fc 01       	movw	r30, r24
     dd2:	ea 59       	subi	r30, 0x9A	; 154
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 81       	ld	r24, Z
     dd8:	88 2f       	mov	r24, r24
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9c 01       	movw	r18, r24
     dde:	28 51       	subi	r18, 0x18	; 24
     de0:	30 40       	sbci	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 2e       	mov	r0, r18
     de8:	02 c0       	rjmp	.+4      	; 0xdee <DIO_Write+0x1e4>
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	0a 94       	dec	r0
     df0:	e2 f7       	brpl	.-8      	; 0xdea <DIO_Write+0x1e0>
     df2:	80 95       	com	r24
     df4:	84 23       	and	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	ea c0       	rjmp	.+468    	; 0xfce <DIO_Write+0x3c4>
			}//end else if
	    }//end if

	    else if(u8_Data == HIGH)
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <DIO_Write+0x1f8>
     e00:	e6 c0       	rjmp	.+460    	; 0xfce <DIO_Write+0x3c4>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	c9 01       	movw	r24, r18
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	82 0f       	add	r24, r18
     e10:	93 1f       	adc	r25, r19
     e12:	fc 01       	movw	r30, r24
     e14:	ea 59       	subi	r30, 0x9A	; 154
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	88 30       	cpi	r24, 0x08	; 8
     e1c:	f8 f4       	brcc	.+62     	; 0xe5c <DIO_Write+0x252>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
     e1e:	ab e3       	ldi	r26, 0x3B	; 59
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	eb e3       	ldi	r30, 0x3B	; 59
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	c9 01       	movw	r24, r18
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	82 0f       	add	r24, r18
     e38:	93 1f       	adc	r25, r19
     e3a:	fc 01       	movw	r30, r24
     e3c:	ea 59       	subi	r30, 0x9A	; 154
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	80 81       	ld	r24, Z
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_Write+0x248>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_Write+0x244>
     e56:	84 2b       	or	r24, r20
     e58:	8c 93       	st	X, r24
     e5a:	b9 c0       	rjmp	.+370    	; 0xfce <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	c9 01       	movw	r24, r18
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	82 0f       	add	r24, r18
     e6a:	93 1f       	adc	r25, r19
     e6c:	fc 01       	movw	r30, r24
     e6e:	ea 59       	subi	r30, 0x9A	; 154
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	80 81       	ld	r24, Z
     e74:	88 30       	cpi	r24, 0x08	; 8
     e76:	80 f1       	brcs	.+96     	; 0xed8 <DIO_Write+0x2ce>
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	c9 01       	movw	r24, r18
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	fc 01       	movw	r30, r24
     e8a:	ea 59       	subi	r30, 0x9A	; 154
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 81       	ld	r24, Z
     e90:	80 31       	cpi	r24, 0x10	; 16
     e92:	10 f5       	brcc	.+68     	; 0xed8 <DIO_Write+0x2ce>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
     e94:	a8 e3       	ldi	r26, 0x38	; 56
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e8 e3       	ldi	r30, 0x38	; 56
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	c9 01       	movw	r24, r18
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	82 0f       	add	r24, r18
     eae:	93 1f       	adc	r25, r19
     eb0:	fc 01       	movw	r30, r24
     eb2:	ea 59       	subi	r30, 0x9A	; 154
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	80 81       	ld	r24, Z
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9c 01       	movw	r18, r24
     ebe:	28 50       	subi	r18, 0x08	; 8
     ec0:	30 40       	sbci	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_Write+0x2c4>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_Write+0x2c0>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	7b c0       	rjmp	.+246    	; 0xfce <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	c9 01       	movw	r24, r18
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	82 0f       	add	r24, r18
     ee6:	93 1f       	adc	r25, r19
     ee8:	fc 01       	movw	r30, r24
     eea:	ea 59       	subi	r30, 0x9A	; 154
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	80 81       	ld	r24, Z
     ef0:	80 31       	cpi	r24, 0x10	; 16
     ef2:	80 f1       	brcs	.+96     	; 0xf54 <DIO_Write+0x34a>
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	c9 01       	movw	r24, r18
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	82 0f       	add	r24, r18
     f02:	93 1f       	adc	r25, r19
     f04:	fc 01       	movw	r30, r24
     f06:	ea 59       	subi	r30, 0x9A	; 154
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	88 31       	cpi	r24, 0x18	; 24
     f0e:	10 f5       	brcc	.+68     	; 0xf54 <DIO_Write+0x34a>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
     f10:	a5 e3       	ldi	r26, 0x35	; 53
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e5 e3       	ldi	r30, 0x35	; 53
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	c9 01       	movw	r24, r18
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	82 0f       	add	r24, r18
     f2a:	93 1f       	adc	r25, r19
     f2c:	fc 01       	movw	r30, r24
     f2e:	ea 59       	subi	r30, 0x9A	; 154
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	80 81       	ld	r24, Z
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9c 01       	movw	r18, r24
     f3a:	20 51       	subi	r18, 0x10	; 16
     f3c:	30 40       	sbci	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_Write+0x340>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_Write+0x33c>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	3d c0       	rjmp	.+122    	; 0xfce <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	c9 01       	movw	r24, r18
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	82 0f       	add	r24, r18
     f62:	93 1f       	adc	r25, r19
     f64:	fc 01       	movw	r30, r24
     f66:	ea 59       	subi	r30, 0x9A	; 154
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 81       	ld	r24, Z
     f6c:	88 31       	cpi	r24, 0x18	; 24
     f6e:	78 f1       	brcs	.+94     	; 0xfce <DIO_Write+0x3c4>
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	c9 01       	movw	r24, r18
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	82 0f       	add	r24, r18
     f7e:	93 1f       	adc	r25, r19
     f80:	fc 01       	movw	r30, r24
     f82:	ea 59       	subi	r30, 0x9A	; 154
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	80 32       	cpi	r24, 0x20	; 32
     f8a:	08 f5       	brcc	.+66     	; 0xfce <DIO_Write+0x3c4>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
     f8c:	a2 e3       	ldi	r26, 0x32	; 50
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e2 e3       	ldi	r30, 0x32	; 50
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	c9 01       	movw	r24, r18
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	82 0f       	add	r24, r18
     fa6:	93 1f       	adc	r25, r19
     fa8:	fc 01       	movw	r30, r24
     faa:	ea 59       	subi	r30, 0x9A	; 154
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	80 81       	ld	r24, Z
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	9c 01       	movw	r18, r24
     fb6:	28 51       	subi	r18, 0x18	; 24
     fb8:	30 40       	sbci	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_Write+0x3bc>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_Write+0x3b8>
     fca:	84 2b       	or	r24, r20
     fcc:	8c 93       	st	X, r24
			}//end else if
	    }//end else if
		return E_OK;
     fce:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_write
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <DIO_Read>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8_GroupId, uint8_t* pu8_Data)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <DIO_Read+0x6>
     fe0:	00 d0       	rcall	.+0      	; 0xfe2 <DIO_Read+0x8>
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	7b 83       	std	Y+3, r23	; 0x03
     fea:	6a 83       	std	Y+2, r22	; 0x02
	if(pu8_Data == NULL_PTR)		return E_ERROR;
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	11 f4       	brne	.+4      	; 0xff8 <DIO_Read+0x1e>
     ff4:	1c 82       	std	Y+4, r1	; 0x04
     ff6:	e8 c0       	rjmp	.+464    	; 0x11c8 <DIO_Read+0x1ee>
	else
	{
		if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	c9 01       	movw	r24, r18
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	82 0f       	add	r24, r18
    1006:	93 1f       	adc	r25, r19
    1008:	fc 01       	movw	r30, r24
    100a:	ea 59       	subi	r30, 0x9A	; 154
    100c:	ff 4f       	sbci	r31, 0xFF	; 255
    100e:	80 81       	ld	r24, Z
    1010:	88 30       	cpi	r24, 0x08	; 8
    1012:	f8 f4       	brcc	.+62     	; 0x1052 <DIO_Read+0x78>
		{
			*pu8_Data = GET_BIT(PINA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1014:	e9 e3       	ldi	r30, 0x39	; 57
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	c9 01       	movw	r24, r18
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	82 0f       	add	r24, r18
    102a:	93 1f       	adc	r25, r19
    102c:	fc 01       	movw	r30, r24
    102e:	ea 59       	subi	r30, 0x9A	; 154
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	80 81       	ld	r24, Z
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_Read+0x6a>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_Read+0x66>
    1048:	84 23       	and	r24, r20
    104a:	ea 81       	ldd	r30, Y+2	; 0x02
    104c:	fb 81       	ldd	r31, Y+3	; 0x03
    104e:	80 83       	st	Z, r24
    1050:	b9 c0       	rjmp	.+370    	; 0x11c4 <DIO_Read+0x1ea>
		}//end if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	c9 01       	movw	r24, r18
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	82 0f       	add	r24, r18
    1060:	93 1f       	adc	r25, r19
    1062:	fc 01       	movw	r30, r24
    1064:	ea 59       	subi	r30, 0x9A	; 154
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	88 30       	cpi	r24, 0x08	; 8
    106c:	80 f1       	brcs	.+96     	; 0x10ce <DIO_Read+0xf4>
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	c9 01       	movw	r24, r18
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	82 0f       	add	r24, r18
    107c:	93 1f       	adc	r25, r19
    107e:	fc 01       	movw	r30, r24
    1080:	ea 59       	subi	r30, 0x9A	; 154
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	80 81       	ld	r24, Z
    1086:	80 31       	cpi	r24, 0x10	; 16
    1088:	10 f5       	brcc	.+68     	; 0x10ce <DIO_Read+0xf4>
		{
			*pu8_Data = GET_BIT(PINB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    108a:	e6 e3       	ldi	r30, 0x36	; 54
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	c9 01       	movw	r24, r18
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	82 0f       	add	r24, r18
    10a0:	93 1f       	adc	r25, r19
    10a2:	fc 01       	movw	r30, r24
    10a4:	ea 59       	subi	r30, 0x9A	; 154
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	80 81       	ld	r24, Z
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9c 01       	movw	r18, r24
    10b0:	28 50       	subi	r18, 0x08	; 8
    10b2:	30 40       	sbci	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_Read+0xe6>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_Read+0xe2>
    10c4:	84 23       	and	r24, r20
    10c6:	ea 81       	ldd	r30, Y+2	; 0x02
    10c8:	fb 81       	ldd	r31, Y+3	; 0x03
    10ca:	80 83       	st	Z, r24
    10cc:	7b c0       	rjmp	.+246    	; 0x11c4 <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	c9 01       	movw	r24, r18
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	82 0f       	add	r24, r18
    10dc:	93 1f       	adc	r25, r19
    10de:	fc 01       	movw	r30, r24
    10e0:	ea 59       	subi	r30, 0x9A	; 154
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 81       	ld	r24, Z
    10e6:	80 31       	cpi	r24, 0x10	; 16
    10e8:	80 f1       	brcs	.+96     	; 0x114a <DIO_Read+0x170>
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	c9 01       	movw	r24, r18
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	82 0f       	add	r24, r18
    10f8:	93 1f       	adc	r25, r19
    10fa:	fc 01       	movw	r30, r24
    10fc:	ea 59       	subi	r30, 0x9A	; 154
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	80 81       	ld	r24, Z
    1102:	88 31       	cpi	r24, 0x18	; 24
    1104:	10 f5       	brcc	.+68     	; 0x114a <DIO_Read+0x170>
		{
			*pu8_Data = GET_BIT(PINC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1106:	e3 e3       	ldi	r30, 0x33	; 51
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	48 2f       	mov	r20, r24
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	c9 01       	movw	r24, r18
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	82 0f       	add	r24, r18
    111c:	93 1f       	adc	r25, r19
    111e:	fc 01       	movw	r30, r24
    1120:	ea 59       	subi	r30, 0x9A	; 154
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	80 81       	ld	r24, Z
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9c 01       	movw	r18, r24
    112c:	20 51       	subi	r18, 0x10	; 16
    112e:	30 40       	sbci	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_Read+0x162>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_Read+0x15e>
    1140:	84 23       	and	r24, r20
    1142:	ea 81       	ldd	r30, Y+2	; 0x02
    1144:	fb 81       	ldd	r31, Y+3	; 0x03
    1146:	80 83       	st	Z, r24
    1148:	3d c0       	rjmp	.+122    	; 0x11c4 <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	c9 01       	movw	r24, r18
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	82 0f       	add	r24, r18
    1158:	93 1f       	adc	r25, r19
    115a:	fc 01       	movw	r30, r24
    115c:	ea 59       	subi	r30, 0x9A	; 154
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	80 81       	ld	r24, Z
    1162:	88 31       	cpi	r24, 0x18	; 24
    1164:	78 f1       	brcs	.+94     	; 0x11c4 <DIO_Read+0x1ea>
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	c9 01       	movw	r24, r18
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	82 0f       	add	r24, r18
    1174:	93 1f       	adc	r25, r19
    1176:	fc 01       	movw	r30, r24
    1178:	ea 59       	subi	r30, 0x9A	; 154
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	80 81       	ld	r24, Z
    117e:	80 32       	cpi	r24, 0x20	; 32
    1180:	08 f5       	brcc	.+66     	; 0x11c4 <DIO_Read+0x1ea>
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1182:	e0 e3       	ldi	r30, 0x30	; 48
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	c9 01       	movw	r24, r18
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	82 0f       	add	r24, r18
    1198:	93 1f       	adc	r25, r19
    119a:	fc 01       	movw	r30, r24
    119c:	ea 59       	subi	r30, 0x9A	; 154
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	80 81       	ld	r24, Z
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9c 01       	movw	r18, r24
    11a8:	28 51       	subi	r18, 0x18	; 24
    11aa:	30 40       	sbci	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_Read+0x1de>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_Read+0x1da>
    11bc:	84 23       	and	r24, r20
    11be:	ea 81       	ldd	r30, Y+2	; 0x02
    11c0:	fb 81       	ldd	r31, Y+3	; 0x03
    11c2:	80 83       	st	Z, r24
		}//end else if

		return E_OK;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	8c 83       	std	Y+4, r24	; 0x04
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
	}//end else
}//end DIO_Read
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <DIO_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_toggle(uint8_t u8_GroupId)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	0f 92       	push	r0
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
	if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	c9 01       	movw	r24, r18
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	82 0f       	add	r24, r18
    11f2:	93 1f       	adc	r25, r19
    11f4:	fc 01       	movw	r30, r24
    11f6:	ea 59       	subi	r30, 0x9A	; 154
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	80 81       	ld	r24, Z
    11fc:	88 30       	cpi	r24, 0x08	; 8
    11fe:	f8 f4       	brcc	.+62     	; 0x123e <DIO_toggle+0x66>
	{
		TOGGLE_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1200:	ab e3       	ldi	r26, 0x3B	; 59
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	eb e3       	ldi	r30, 0x3B	; 59
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	c9 01       	movw	r24, r18
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	82 0f       	add	r24, r18
    121a:	93 1f       	adc	r25, r19
    121c:	fc 01       	movw	r30, r24
    121e:	ea 59       	subi	r30, 0x9A	; 154
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 81       	ld	r24, Z
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	02 2e       	mov	r0, r18
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_toggle+0x5c>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	0a 94       	dec	r0
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_toggle+0x58>
    1238:	84 27       	eor	r24, r20
    123a:	8c 93       	st	X, r24
    123c:	b9 c0       	rjmp	.+370    	; 0x13b0 <DIO_toggle+0x1d8>
	}//end if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	c9 01       	movw	r24, r18
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	82 0f       	add	r24, r18
    124c:	93 1f       	adc	r25, r19
    124e:	fc 01       	movw	r30, r24
    1250:	ea 59       	subi	r30, 0x9A	; 154
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	80 81       	ld	r24, Z
    1256:	88 30       	cpi	r24, 0x08	; 8
    1258:	80 f1       	brcs	.+96     	; 0x12ba <DIO_toggle+0xe2>
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	c9 01       	movw	r24, r18
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	82 0f       	add	r24, r18
    1268:	93 1f       	adc	r25, r19
    126a:	fc 01       	movw	r30, r24
    126c:	ea 59       	subi	r30, 0x9A	; 154
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	80 81       	ld	r24, Z
    1272:	80 31       	cpi	r24, 0x10	; 16
    1274:	10 f5       	brcc	.+68     	; 0x12ba <DIO_toggle+0xe2>
	{
		TOGGLE_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    1276:	a8 e3       	ldi	r26, 0x38	; 56
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e8 e3       	ldi	r30, 0x38	; 56
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	48 2f       	mov	r20, r24
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	c9 01       	movw	r24, r18
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	82 0f       	add	r24, r18
    1290:	93 1f       	adc	r25, r19
    1292:	fc 01       	movw	r30, r24
    1294:	ea 59       	subi	r30, 0x9A	; 154
    1296:	ff 4f       	sbci	r31, 0xFF	; 255
    1298:	80 81       	ld	r24, Z
    129a:	88 2f       	mov	r24, r24
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9c 01       	movw	r18, r24
    12a0:	28 50       	subi	r18, 0x08	; 8
    12a2:	30 40       	sbci	r19, 0x00	; 0
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 2e       	mov	r0, r18
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_toggle+0xd8>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	0a 94       	dec	r0
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_toggle+0xd4>
    12b4:	84 27       	eor	r24, r20
    12b6:	8c 93       	st	X, r24
    12b8:	7b c0       	rjmp	.+246    	; 0x13b0 <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	c9 01       	movw	r24, r18
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	82 0f       	add	r24, r18
    12c8:	93 1f       	adc	r25, r19
    12ca:	fc 01       	movw	r30, r24
    12cc:	ea 59       	subi	r30, 0x9A	; 154
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	80 81       	ld	r24, Z
    12d2:	80 31       	cpi	r24, 0x10	; 16
    12d4:	80 f1       	brcs	.+96     	; 0x1336 <DIO_toggle+0x15e>
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	c9 01       	movw	r24, r18
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	82 0f       	add	r24, r18
    12e4:	93 1f       	adc	r25, r19
    12e6:	fc 01       	movw	r30, r24
    12e8:	ea 59       	subi	r30, 0x9A	; 154
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	88 31       	cpi	r24, 0x18	; 24
    12f0:	10 f5       	brcc	.+68     	; 0x1336 <DIO_toggle+0x15e>
	{
		TOGGLE_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    12f2:	a5 e3       	ldi	r26, 0x35	; 53
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e5 e3       	ldi	r30, 0x35	; 53
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	c9 01       	movw	r24, r18
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	82 0f       	add	r24, r18
    130c:	93 1f       	adc	r25, r19
    130e:	fc 01       	movw	r30, r24
    1310:	ea 59       	subi	r30, 0x9A	; 154
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	80 81       	ld	r24, Z
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9c 01       	movw	r18, r24
    131c:	20 51       	subi	r18, 0x10	; 16
    131e:	30 40       	sbci	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_toggle+0x154>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_toggle+0x150>
    1330:	84 27       	eor	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	3d c0       	rjmp	.+122    	; 0x13b0 <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	c9 01       	movw	r24, r18
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	82 0f       	add	r24, r18
    1344:	93 1f       	adc	r25, r19
    1346:	fc 01       	movw	r30, r24
    1348:	ea 59       	subi	r30, 0x9A	; 154
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	88 31       	cpi	r24, 0x18	; 24
    1350:	78 f1       	brcs	.+94     	; 0x13b0 <DIO_toggle+0x1d8>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	c9 01       	movw	r24, r18
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	82 0f       	add	r24, r18
    1360:	93 1f       	adc	r25, r19
    1362:	fc 01       	movw	r30, r24
    1364:	ea 59       	subi	r30, 0x9A	; 154
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	80 81       	ld	r24, Z
    136a:	80 32       	cpi	r24, 0x20	; 32
    136c:	08 f5       	brcc	.+66     	; 0x13b0 <DIO_toggle+0x1d8>
	{
		TOGGLE_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    136e:	a2 e3       	ldi	r26, 0x32	; 50
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e2 e3       	ldi	r30, 0x32	; 50
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	c9 01       	movw	r24, r18
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	82 0f       	add	r24, r18
    1388:	93 1f       	adc	r25, r19
    138a:	fc 01       	movw	r30, r24
    138c:	ea 59       	subi	r30, 0x9A	; 154
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	80 81       	ld	r24, Z
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9c 01       	movw	r18, r24
    1398:	28 51       	subi	r18, 0x18	; 24
    139a:	30 40       	sbci	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_toggle+0x1d0>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <DIO_toggle+0x1cc>
    13ac:	84 27       	eor	r24, r20
    13ae:	8c 93       	st	X, r24
	}//end else if

	return E_OK;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_toggle
    13b2:	0f 90       	pop	r0
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <LED_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the led
*************************************************************************************************/
enuErrorStatus_t	LED_Init(void)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	return DIO_Init();
    13c2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <DIO_Init>
}//end LED_Init
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <LED_ON>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led on
*************************************************************************************************/
enuErrorStatus_t	LED_ON(uint8_t u8_LedNum)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	0f 92       	push	r0
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write(u8_LedNum, HIGH);
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	61 e0       	ldi	r22, 0x01	; 1
    13dc:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
	return E_OK;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
}//end LED_ON
    13e2:	0f 90       	pop	r0
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	08 95       	ret

000013ea <LED_OFF>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led off
*************************************************************************************************/
enuErrorStatus_t	LED_OFF(uint8_t u8_LedNum)
{
    13ea:	df 93       	push	r29
    13ec:	cf 93       	push	r28
    13ee:	0f 92       	push	r0
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write(u8_LedNum, LOW);
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
	return E_OK;
    13fe:	81 e0       	ldi	r24, 0x01	; 1

}//end LED_OFF
    1400:	0f 90       	pop	r0
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <LED_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the led
*************************************************************************************************/
enuErrorStatus_t	LED_toggle(uint8_t u8_LedNum)
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	0f 92       	push	r0
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	89 83       	std	Y+1, r24	; 0x01
	DIO_toggle(u8_LedNum);
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <DIO_toggle>
	return E_OK;
    141a:	81 e0       	ldi	r24, 0x01	; 1
}
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <DCMotor_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the motor
*************************************************************************************************/
enuErrorStatus_t DCMotor_Init(void)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
	//configure PB0,PB1(Motor pins) as output pins
	return DIO_Init();
    142c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <DIO_Init>
}//end DCMotor_Init
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <DCMotor_setDirection>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the motor direction
*************************************************************************************************/
enuErrorStatus_t DCMotor_setDirection(uint8_t u8_Motor, enuMotorDirection_t enuDirection)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <DCMotor_setDirection+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <DCMotor_setDirection+0x8>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02
	switch(enuDirection)
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	3c 83       	std	Y+4, r19	; 0x04
    144e:	2b 83       	std	Y+3, r18	; 0x03
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	31 f0       	breq	.+12     	; 0x1464 <DCMotor_setDirection+0x2e>
    1458:	2b 81       	ldd	r18, Y+3	; 0x03
    145a:	3c 81       	ldd	r19, Y+4	; 0x04
    145c:	21 30       	cpi	r18, 0x01	; 1
    145e:	31 05       	cpc	r19, r1
    1460:	c9 f0       	breq	.+50     	; 0x1494 <DCMotor_setDirection+0x5e>
    1462:	2f c0       	rjmp	.+94     	; 0x14c2 <DCMotor_setDirection+0x8c>
	{
	case FORWARD:

		if(u8_Motor == MOTOR1)
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	88 23       	and	r24, r24
    1468:	49 f4       	brne	.+18     	; 0x147c <DCMotor_setDirection+0x46>
		{
			DIO_Write(DC1_IN1, HIGH);
    146a:	87 e0       	ldi	r24, 0x07	; 7
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
			DIO_Write(DC1_IN2, LOW);
    1472:	88 e0       	ldi	r24, 0x08	; 8
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
    147a:	23 c0       	rjmp	.+70     	; 0x14c2 <DCMotor_setDirection+0x8c>
		}
		else if(u8_Motor == MOTOR2)
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	01 f5       	brne	.+64     	; 0x14c2 <DCMotor_setDirection+0x8c>
		{
			DIO_Write(DC2_IN1, HIGH);
    1482:	8a e0       	ldi	r24, 0x0A	; 10
    1484:	61 e0       	ldi	r22, 0x01	; 1
    1486:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
			DIO_Write(DC2_IN2, LOW);
    148a:	8b e0       	ldi	r24, 0x0B	; 11
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
    1492:	17 c0       	rjmp	.+46     	; 0x14c2 <DCMotor_setDirection+0x8c>
		}
		break;
	case BACKWARD:

		if(u8_Motor == MOTOR1)
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	88 23       	and	r24, r24
    1498:	49 f4       	brne	.+18     	; 0x14ac <DCMotor_setDirection+0x76>
		{
			DIO_Write(DC1_IN1, LOW);
    149a:	87 e0       	ldi	r24, 0x07	; 7
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
			DIO_Write(DC1_IN2, HIGH);
    14a2:	88 e0       	ldi	r24, 0x08	; 8
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
    14aa:	0b c0       	rjmp	.+22     	; 0x14c2 <DCMotor_setDirection+0x8c>
		}
		else if(u8_Motor == MOTOR2)
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	41 f4       	brne	.+16     	; 0x14c2 <DCMotor_setDirection+0x8c>
		{
			DIO_Write(DC2_IN1, LOW);
    14b2:	8a e0       	ldi	r24, 0x0A	; 10
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
			DIO_Write(DC2_IN2, HIGH);
    14ba:	8b e0       	ldi	r24, 0x0B	; 11
    14bc:	61 e0       	ldi	r22, 0x01	; 1
    14be:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
		}
		break;
	}//end switch
	return E_OK;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
}//end DCMotor_setDirection
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <DCMotor_setSpeed>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the motor speed
*************************************************************************************************/
enuErrorStatus_t DCMotor_setSpeed(uint8_t u8_Speed)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DCMotor_setSpeed+0x6>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	89 83       	std	Y+1, r24	; 0x01
	if(u8_Speed > 100)
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	85 36       	cpi	r24, 0x65	; 101
    14e2:	10 f0       	brcs	.+4      	; 0x14e8 <DCMotor_setSpeed+0x16>
	{
		return E_ERROR;
    14e4:	1a 82       	std	Y+2, r1	; 0x02
    14e6:	07 c0       	rjmp	.+14     	; 0x14f6 <DCMotor_setSpeed+0x24>
	}//end if
	PWM_Init();
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <PWM_Init>
	PWM_Start(u8_Speed);
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	0e 94 93 01 	call	0x326	; 0x326 <PWM_Start>

	return E_OK;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	8a 83       	std	Y+2, r24	; 0x02
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02

}//end DCMotor_setSpeed
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <DCMotor_stop>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to stop the motor
*************************************************************************************************/
enuErrorStatus_t DCMotor_stop(uint8_t u8_Motor)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	0f 92       	push	r0
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	89 83       	std	Y+1, r24	; 0x01
	if(u8_Motor == MOTOR1)
    150e:	89 81       	ldd	r24, Y+1	; 0x01
    1510:	88 23       	and	r24, r24
    1512:	49 f4       	brne	.+18     	; 0x1526 <DCMotor_stop+0x24>
	{
		DIO_Write(DC1_IN1, LOW);
    1514:	87 e0       	ldi	r24, 0x07	; 7
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
		DIO_Write(DC1_IN2, LOW);
    151c:	88 e0       	ldi	r24, 0x08	; 8
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
    1524:	0b c0       	rjmp	.+22     	; 0x153c <DCMotor_stop+0x3a>
	}
	else if(u8_Motor == MOTOR2)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	41 f4       	brne	.+16     	; 0x153c <DCMotor_stop+0x3a>
	{
		DIO_Write(DC2_IN1, LOW);
    152c:	8a e0       	ldi	r24, 0x0A	; 10
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
		DIO_Write(DC2_IN2, LOW);
    1534:	8b e0       	ldi	r24, 0x0B	; 11
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_Write>
	}

	return E_OK;
    153c:	81 e0       	ldi	r24, 0x01	; 1
}//end DCMotor_stop
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <DCMotor_start>:


enuErrorStatus_t DCMotor_start(uint8_t u8_Motor)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	00 d0       	rcall	.+0      	; 0x154c <DCMotor_start+0x6>
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01

}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <BTN_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the button
*************************************************************************************************/
enuErrorStatus_t	BTN_Init(void)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
	return DIO_Init();
    1564:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <DIO_Init>
}//end BTN_Init
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <BTN_getState>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read the button status (pressed, not_pressed)
*************************************************************************************************/
enuErrorStatus_t	BTN_getState(uint8_t u8_BtnNum, enuBTNStatus_t* enuBTNStatus)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	e8 97       	sbiw	r28, 0x38	; 56
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	8a 87       	std	Y+10, r24	; 0x0a
    1584:	7c 87       	std	Y+12, r23	; 0x0c
    1586:	6b 87       	std	Y+11, r22	; 0x0b

	static uint8_t u8_HeldFlag=0;
	uint64_t u64_Counter=0;
    1588:	19 82       	std	Y+1, r1	; 0x01
    158a:	1a 82       	std	Y+2, r1	; 0x02
    158c:	1b 82       	std	Y+3, r1	; 0x03
    158e:	1c 82       	std	Y+4, r1	; 0x04
    1590:	1d 82       	std	Y+5, r1	; 0x05
    1592:	1e 82       	std	Y+6, r1	; 0x06
    1594:	1f 82       	std	Y+7, r1	; 0x07
    1596:	18 86       	std	Y+8, r1	; 0x08

	if(enuBTNStatus == NULL_PTR)	return E_ERROR;
    1598:	8b 85       	ldd	r24, Y+11	; 0x0b
    159a:	9c 85       	ldd	r25, Y+12	; 0x0c
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	11 f4       	brne	.+4      	; 0x15a4 <BTN_getState+0x36>
    15a0:	1d 86       	std	Y+13, r1	; 0x0d
    15a2:	a3 c1       	rjmp	.+838    	; 0x18ea <BTN_getState+0x37c>
	else
	{
		uint8_t u8_Data;

		DIO_Read(u8_BtnNum, &u8_Data);
    15a4:	9e 01       	movw	r18, r28
    15a6:	27 5f       	subi	r18, 0xF7	; 247
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ac:	b9 01       	movw	r22, r18
    15ae:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_Read>
    15b2:	eb c0       	rjmp	.+470    	; 0x178a <BTN_getState+0x21c>

		while(u8_Data == LOW && u64_Counter < 10000)
		{
			u64_Counter++;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	8e 87       	std	Y+14, r24	; 0x0e
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	9f 87       	std	Y+15, r25	; 0x0f
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	88 8b       	std	Y+16, r24	; 0x10
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	99 8b       	std	Y+17, r25	; 0x11
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	8a 8b       	std	Y+18, r24	; 0x12
    15c8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ca:	9b 8b       	std	Y+19, r25	; 0x13
    15cc:	8f 81       	ldd	r24, Y+7	; 0x07
    15ce:	8c 8b       	std	Y+20, r24	; 0x14
    15d0:	98 85       	ldd	r25, Y+8	; 0x08
    15d2:	9d 8b       	std	Y+21, r25	; 0x15
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	8e 8b       	std	Y+22, r24	; 0x16
    15d8:	1f 8a       	std	Y+23, r1	; 0x17
    15da:	18 8e       	std	Y+24, r1	; 0x18
    15dc:	19 8e       	std	Y+25, r1	; 0x19
    15de:	1a 8e       	std	Y+26, r1	; 0x1a
    15e0:	1b 8e       	std	Y+27, r1	; 0x1b
    15e2:	1c 8e       	std	Y+28, r1	; 0x1c
    15e4:	1d 8e       	std	Y+29, r1	; 0x1d
    15e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e8:	8e 89       	ldd	r24, Y+22	; 0x16
    15ea:	98 0f       	add	r25, r24
    15ec:	9e 8f       	std	Y+30, r25	; 0x1e
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	9e a3       	std	Y+38, r25	; 0x26
    15f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f6:	89 17       	cp	r24, r25
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <BTN_getState+0x8e>
    15fa:	1e a2       	std	Y+38, r1	; 0x26
    15fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fe:	9f 89       	ldd	r25, Y+23	; 0x17
    1600:	89 0f       	add	r24, r25
    1602:	8f 8f       	std	Y+31, r24	; 0x1f
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	8f a3       	std	Y+39, r24	; 0x27
    1608:	9f 8d       	ldd	r25, Y+31	; 0x1f
    160a:	8f 85       	ldd	r24, Y+15	; 0x0f
    160c:	98 17       	cp	r25, r24
    160e:	08 f0       	brcs	.+2      	; 0x1612 <BTN_getState+0xa4>
    1610:	1f a2       	std	Y+39, r1	; 0x27
    1612:	9e a1       	ldd	r25, Y+38	; 0x26
    1614:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1616:	98 0f       	add	r25, r24
    1618:	98 a7       	std	Y+40, r25	; 0x28
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	99 a7       	std	Y+41, r25	; 0x29
    161e:	88 a5       	ldd	r24, Y+40	; 0x28
    1620:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1622:	89 17       	cp	r24, r25
    1624:	08 f0       	brcs	.+2      	; 0x1628 <BTN_getState+0xba>
    1626:	19 a6       	std	Y+41, r1	; 0x29
    1628:	8f a1       	ldd	r24, Y+39	; 0x27
    162a:	99 a5       	ldd	r25, Y+41	; 0x29
    162c:	89 2b       	or	r24, r25
    162e:	8f a3       	std	Y+39, r24	; 0x27
    1630:	88 a5       	ldd	r24, Y+40	; 0x28
    1632:	8f 8f       	std	Y+31, r24	; 0x1f
    1634:	98 89       	ldd	r25, Y+16	; 0x10
    1636:	88 8d       	ldd	r24, Y+24	; 0x18
    1638:	98 0f       	add	r25, r24
    163a:	98 a3       	std	Y+32, r25	; 0x20
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	9a a7       	std	Y+42, r25	; 0x2a
    1640:	88 a1       	ldd	r24, Y+32	; 0x20
    1642:	98 89       	ldd	r25, Y+16	; 0x10
    1644:	89 17       	cp	r24, r25
    1646:	08 f0       	brcs	.+2      	; 0x164a <BTN_getState+0xdc>
    1648:	1a a6       	std	Y+42, r1	; 0x2a
    164a:	8f a1       	ldd	r24, Y+39	; 0x27
    164c:	98 a1       	ldd	r25, Y+32	; 0x20
    164e:	89 0f       	add	r24, r25
    1650:	8b a7       	std	Y+43, r24	; 0x2b
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	8c a7       	std	Y+44, r24	; 0x2c
    1656:	9b a5       	ldd	r25, Y+43	; 0x2b
    1658:	88 a1       	ldd	r24, Y+32	; 0x20
    165a:	98 17       	cp	r25, r24
    165c:	08 f0       	brcs	.+2      	; 0x1660 <BTN_getState+0xf2>
    165e:	1c a6       	std	Y+44, r1	; 0x2c
    1660:	9a a5       	ldd	r25, Y+42	; 0x2a
    1662:	8c a5       	ldd	r24, Y+44	; 0x2c
    1664:	98 2b       	or	r25, r24
    1666:	9a a7       	std	Y+42, r25	; 0x2a
    1668:	9b a5       	ldd	r25, Y+43	; 0x2b
    166a:	98 a3       	std	Y+32, r25	; 0x20
    166c:	89 89       	ldd	r24, Y+17	; 0x11
    166e:	99 8d       	ldd	r25, Y+25	; 0x19
    1670:	89 0f       	add	r24, r25
    1672:	89 a3       	std	Y+33, r24	; 0x21
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	8d a7       	std	Y+45, r24	; 0x2d
    1678:	99 a1       	ldd	r25, Y+33	; 0x21
    167a:	89 89       	ldd	r24, Y+17	; 0x11
    167c:	98 17       	cp	r25, r24
    167e:	08 f0       	brcs	.+2      	; 0x1682 <BTN_getState+0x114>
    1680:	1d a6       	std	Y+45, r1	; 0x2d
    1682:	9a a5       	ldd	r25, Y+42	; 0x2a
    1684:	89 a1       	ldd	r24, Y+33	; 0x21
    1686:	98 0f       	add	r25, r24
    1688:	9e a7       	std	Y+46, r25	; 0x2e
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	9f a7       	std	Y+47, r25	; 0x2f
    168e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1690:	99 a1       	ldd	r25, Y+33	; 0x21
    1692:	89 17       	cp	r24, r25
    1694:	08 f0       	brcs	.+2      	; 0x1698 <BTN_getState+0x12a>
    1696:	1f a6       	std	Y+47, r1	; 0x2f
    1698:	8d a5       	ldd	r24, Y+45	; 0x2d
    169a:	9f a5       	ldd	r25, Y+47	; 0x2f
    169c:	89 2b       	or	r24, r25
    169e:	8d a7       	std	Y+45, r24	; 0x2d
    16a0:	8e a5       	ldd	r24, Y+46	; 0x2e
    16a2:	89 a3       	std	Y+33, r24	; 0x21
    16a4:	9a 89       	ldd	r25, Y+18	; 0x12
    16a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16a8:	98 0f       	add	r25, r24
    16aa:	9a a3       	std	Y+34, r25	; 0x22
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	98 ab       	std	Y+48, r25	; 0x30
    16b0:	8a a1       	ldd	r24, Y+34	; 0x22
    16b2:	9a 89       	ldd	r25, Y+18	; 0x12
    16b4:	89 17       	cp	r24, r25
    16b6:	08 f0       	brcs	.+2      	; 0x16ba <BTN_getState+0x14c>
    16b8:	18 aa       	std	Y+48, r1	; 0x30
    16ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    16bc:	9a a1       	ldd	r25, Y+34	; 0x22
    16be:	89 0f       	add	r24, r25
    16c0:	89 ab       	std	Y+49, r24	; 0x31
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	8a ab       	std	Y+50, r24	; 0x32
    16c6:	99 a9       	ldd	r25, Y+49	; 0x31
    16c8:	8a a1       	ldd	r24, Y+34	; 0x22
    16ca:	98 17       	cp	r25, r24
    16cc:	08 f0       	brcs	.+2      	; 0x16d0 <BTN_getState+0x162>
    16ce:	1a aa       	std	Y+50, r1	; 0x32
    16d0:	98 a9       	ldd	r25, Y+48	; 0x30
    16d2:	8a a9       	ldd	r24, Y+50	; 0x32
    16d4:	98 2b       	or	r25, r24
    16d6:	98 ab       	std	Y+48, r25	; 0x30
    16d8:	99 a9       	ldd	r25, Y+49	; 0x31
    16da:	9a a3       	std	Y+34, r25	; 0x22
    16dc:	8b 89       	ldd	r24, Y+19	; 0x13
    16de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16e0:	89 0f       	add	r24, r25
    16e2:	8b a3       	std	Y+35, r24	; 0x23
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	8b ab       	std	Y+51, r24	; 0x33
    16e8:	9b a1       	ldd	r25, Y+35	; 0x23
    16ea:	8b 89       	ldd	r24, Y+19	; 0x13
    16ec:	98 17       	cp	r25, r24
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <BTN_getState+0x184>
    16f0:	1b aa       	std	Y+51, r1	; 0x33
    16f2:	98 a9       	ldd	r25, Y+48	; 0x30
    16f4:	8b a1       	ldd	r24, Y+35	; 0x23
    16f6:	98 0f       	add	r25, r24
    16f8:	9c ab       	std	Y+52, r25	; 0x34
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	9d ab       	std	Y+53, r25	; 0x35
    16fe:	8c a9       	ldd	r24, Y+52	; 0x34
    1700:	9b a1       	ldd	r25, Y+35	; 0x23
    1702:	89 17       	cp	r24, r25
    1704:	08 f0       	brcs	.+2      	; 0x1708 <BTN_getState+0x19a>
    1706:	1d aa       	std	Y+53, r1	; 0x35
    1708:	8b a9       	ldd	r24, Y+51	; 0x33
    170a:	9d a9       	ldd	r25, Y+53	; 0x35
    170c:	89 2b       	or	r24, r25
    170e:	8b ab       	std	Y+51, r24	; 0x33
    1710:	8c a9       	ldd	r24, Y+52	; 0x34
    1712:	8b a3       	std	Y+35, r24	; 0x23
    1714:	9c 89       	ldd	r25, Y+20	; 0x14
    1716:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1718:	98 0f       	add	r25, r24
    171a:	9c a3       	std	Y+36, r25	; 0x24
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	9e ab       	std	Y+54, r25	; 0x36
    1720:	8c a1       	ldd	r24, Y+36	; 0x24
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	89 17       	cp	r24, r25
    1726:	08 f0       	brcs	.+2      	; 0x172a <BTN_getState+0x1bc>
    1728:	1e aa       	std	Y+54, r1	; 0x36
    172a:	8b a9       	ldd	r24, Y+51	; 0x33
    172c:	9c a1       	ldd	r25, Y+36	; 0x24
    172e:	89 0f       	add	r24, r25
    1730:	8f ab       	std	Y+55, r24	; 0x37
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	88 af       	std	Y+56, r24	; 0x38
    1736:	9f a9       	ldd	r25, Y+55	; 0x37
    1738:	8c a1       	ldd	r24, Y+36	; 0x24
    173a:	98 17       	cp	r25, r24
    173c:	08 f0       	brcs	.+2      	; 0x1740 <BTN_getState+0x1d2>
    173e:	18 ae       	std	Y+56, r1	; 0x38
    1740:	9e a9       	ldd	r25, Y+54	; 0x36
    1742:	88 ad       	ldd	r24, Y+56	; 0x38
    1744:	98 2b       	or	r25, r24
    1746:	9e ab       	std	Y+54, r25	; 0x36
    1748:	9f a9       	ldd	r25, Y+55	; 0x37
    174a:	9c a3       	std	Y+36, r25	; 0x24
    174c:	8d 89       	ldd	r24, Y+21	; 0x15
    174e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1750:	89 0f       	add	r24, r25
    1752:	8d a3       	std	Y+37, r24	; 0x25
    1754:	8e a9       	ldd	r24, Y+54	; 0x36
    1756:	9d a1       	ldd	r25, Y+37	; 0x25
    1758:	89 0f       	add	r24, r25
    175a:	8d a3       	std	Y+37, r24	; 0x25
    175c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	88 a1       	ldd	r24, Y+32	; 0x20
    1766:	8b 83       	std	Y+3, r24	; 0x03
    1768:	99 a1       	ldd	r25, Y+33	; 0x21
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8a a1       	ldd	r24, Y+34	; 0x22
    176e:	8d 83       	std	Y+5, r24	; 0x05
    1770:	9b a1       	ldd	r25, Y+35	; 0x23
    1772:	9e 83       	std	Y+6, r25	; 0x06
    1774:	8c a1       	ldd	r24, Y+36	; 0x24
    1776:	8f 83       	std	Y+7, r24	; 0x07
    1778:	9d a1       	ldd	r25, Y+37	; 0x25
    177a:	98 87       	std	Y+8, r25	; 0x08
			DIO_Read(u8_BtnNum, &u8_Data);
    177c:	9e 01       	movw	r18, r28
    177e:	27 5f       	subi	r18, 0xF7	; 247
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	8a 85       	ldd	r24, Y+10	; 0x0a
    1784:	b9 01       	movw	r22, r18
    1786:	0e 94 ed 07 	call	0xfda	; 0xfda <DIO_Read>
	{
		uint8_t u8_Data;

		DIO_Read(u8_BtnNum, &u8_Data);

		while(u8_Data == LOW && u64_Counter < 10000)
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	88 23       	and	r24, r24
    178e:	a9 f5       	brne	.+106    	; 0x17fa <BTN_getState+0x28c>
    1790:	88 85       	ldd	r24, Y+8	; 0x08
    1792:	88 23       	and	r24, r24
    1794:	91 f5       	brne	.+100    	; 0x17fa <BTN_getState+0x28c>
    1796:	88 85       	ldd	r24, Y+8	; 0x08
    1798:	88 23       	and	r24, r24
    179a:	09 f0       	breq	.+2      	; 0x179e <BTN_getState+0x230>
    179c:	0b cf       	rjmp	.-490    	; 0x15b4 <BTN_getState+0x46>
    179e:	8f 81       	ldd	r24, Y+7	; 0x07
    17a0:	88 23       	and	r24, r24
    17a2:	59 f5       	brne	.+86     	; 0x17fa <BTN_getState+0x28c>
    17a4:	8f 81       	ldd	r24, Y+7	; 0x07
    17a6:	88 23       	and	r24, r24
    17a8:	09 f0       	breq	.+2      	; 0x17ac <BTN_getState+0x23e>
    17aa:	04 cf       	rjmp	.-504    	; 0x15b4 <BTN_getState+0x46>
    17ac:	8e 81       	ldd	r24, Y+6	; 0x06
    17ae:	88 23       	and	r24, r24
    17b0:	21 f5       	brne	.+72     	; 0x17fa <BTN_getState+0x28c>
    17b2:	8e 81       	ldd	r24, Y+6	; 0x06
    17b4:	88 23       	and	r24, r24
    17b6:	09 f0       	breq	.+2      	; 0x17ba <BTN_getState+0x24c>
    17b8:	fd ce       	rjmp	.-518    	; 0x15b4 <BTN_getState+0x46>
    17ba:	8d 81       	ldd	r24, Y+5	; 0x05
    17bc:	88 23       	and	r24, r24
    17be:	e9 f4       	brne	.+58     	; 0x17fa <BTN_getState+0x28c>
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	88 23       	and	r24, r24
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <BTN_getState+0x25a>
    17c6:	f6 ce       	rjmp	.-532    	; 0x15b4 <BTN_getState+0x46>
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	88 23       	and	r24, r24
    17cc:	b1 f4       	brne	.+44     	; 0x17fa <BTN_getState+0x28c>
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	88 23       	and	r24, r24
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <BTN_getState+0x268>
    17d4:	ef ce       	rjmp	.-546    	; 0x15b4 <BTN_getState+0x46>
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	88 23       	and	r24, r24
    17da:	79 f4       	brne	.+30     	; 0x17fa <BTN_getState+0x28c>
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	88 23       	and	r24, r24
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <BTN_getState+0x276>
    17e2:	e8 ce       	rjmp	.-560    	; 0x15b4 <BTN_getState+0x46>
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	88 32       	cpi	r24, 0x28	; 40
    17e8:	40 f4       	brcc	.+16     	; 0x17fa <BTN_getState+0x28c>
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	87 32       	cpi	r24, 0x27	; 39
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <BTN_getState+0x284>
    17f0:	e1 ce       	rjmp	.-574    	; 0x15b4 <BTN_getState+0x46>
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	80 31       	cpi	r24, 0x10	; 16
    17f6:	08 f4       	brcc	.+2      	; 0x17fa <BTN_getState+0x28c>
    17f8:	dd ce       	rjmp	.-582    	; 0x15b4 <BTN_getState+0x46>
		{
			u64_Counter++;
			DIO_Read(u8_BtnNum, &u8_Data);
		}
		if(u64_Counter == 10000)
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	80 31       	cpi	r24, 0x10	; 16
    17fe:	e9 f4       	brne	.+58     	; 0x183a <BTN_getState+0x2cc>
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	87 32       	cpi	r24, 0x27	; 39
    1804:	d1 f4       	brne	.+52     	; 0x183a <BTN_getState+0x2cc>
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	88 23       	and	r24, r24
    180a:	b9 f4       	brne	.+46     	; 0x183a <BTN_getState+0x2cc>
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	88 23       	and	r24, r24
    1810:	a1 f4       	brne	.+40     	; 0x183a <BTN_getState+0x2cc>
    1812:	8d 81       	ldd	r24, Y+5	; 0x05
    1814:	88 23       	and	r24, r24
    1816:	89 f4       	brne	.+34     	; 0x183a <BTN_getState+0x2cc>
    1818:	8e 81       	ldd	r24, Y+6	; 0x06
    181a:	88 23       	and	r24, r24
    181c:	71 f4       	brne	.+28     	; 0x183a <BTN_getState+0x2cc>
    181e:	8f 81       	ldd	r24, Y+7	; 0x07
    1820:	88 23       	and	r24, r24
    1822:	59 f4       	brne	.+22     	; 0x183a <BTN_getState+0x2cc>
    1824:	88 85       	ldd	r24, Y+8	; 0x08
    1826:	88 23       	and	r24, r24
    1828:	41 f4       	brne	.+16     	; 0x183a <BTN_getState+0x2cc>
		{
			*enuBTNStatus = HELD;
    182a:	eb 85       	ldd	r30, Y+11	; 0x0b
    182c:	fc 85       	ldd	r31, Y+12	; 0x0c
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	80 83       	st	Z, r24
			u8_HeldFlag = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	80 93 95 00 	sts	0x0095, r24
    1838:	4e c0       	rjmp	.+156    	; 0x18d6 <BTN_getState+0x368>
		}
		else if(u64_Counter < 10000 && u64_Counter > 0 && u8_HeldFlag == 0)
    183a:	88 85       	ldd	r24, Y+8	; 0x08
    183c:	88 23       	and	r24, r24
    183e:	09 f0       	breq	.+2      	; 0x1842 <BTN_getState+0x2d4>
    1840:	44 c0       	rjmp	.+136    	; 0x18ca <BTN_getState+0x35c>
    1842:	88 85       	ldd	r24, Y+8	; 0x08
    1844:	88 23       	and	r24, r24
    1846:	41 f5       	brne	.+80     	; 0x1898 <BTN_getState+0x32a>
    1848:	8f 81       	ldd	r24, Y+7	; 0x07
    184a:	88 23       	and	r24, r24
    184c:	09 f0       	breq	.+2      	; 0x1850 <BTN_getState+0x2e2>
    184e:	3d c0       	rjmp	.+122    	; 0x18ca <BTN_getState+0x35c>
    1850:	8f 81       	ldd	r24, Y+7	; 0x07
    1852:	88 23       	and	r24, r24
    1854:	09 f5       	brne	.+66     	; 0x1898 <BTN_getState+0x32a>
    1856:	8e 81       	ldd	r24, Y+6	; 0x06
    1858:	88 23       	and	r24, r24
    185a:	b9 f5       	brne	.+110    	; 0x18ca <BTN_getState+0x35c>
    185c:	8e 81       	ldd	r24, Y+6	; 0x06
    185e:	88 23       	and	r24, r24
    1860:	d9 f4       	brne	.+54     	; 0x1898 <BTN_getState+0x32a>
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	88 23       	and	r24, r24
    1866:	89 f5       	brne	.+98     	; 0x18ca <BTN_getState+0x35c>
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    186a:	88 23       	and	r24, r24
    186c:	a9 f4       	brne	.+42     	; 0x1898 <BTN_getState+0x32a>
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	88 23       	and	r24, r24
    1872:	59 f5       	brne	.+86     	; 0x18ca <BTN_getState+0x35c>
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	88 23       	and	r24, r24
    1878:	79 f4       	brne	.+30     	; 0x1898 <BTN_getState+0x32a>
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	88 23       	and	r24, r24
    187e:	29 f5       	brne	.+74     	; 0x18ca <BTN_getState+0x35c>
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	88 23       	and	r24, r24
    1884:	49 f4       	brne	.+18     	; 0x1898 <BTN_getState+0x32a>
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	88 32       	cpi	r24, 0x28	; 40
    188a:	f8 f4       	brcc	.+62     	; 0x18ca <BTN_getState+0x35c>
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	87 32       	cpi	r24, 0x27	; 39
    1890:	19 f4       	brne	.+6      	; 0x1898 <BTN_getState+0x32a>
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	80 31       	cpi	r24, 0x10	; 16
    1896:	c8 f4       	brcc	.+50     	; 0x18ca <BTN_getState+0x35c>
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	89 2b       	or	r24, r25
    189e:	9b 81       	ldd	r25, Y+3	; 0x03
    18a0:	89 2b       	or	r24, r25
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	89 2b       	or	r24, r25
    18a6:	9d 81       	ldd	r25, Y+5	; 0x05
    18a8:	89 2b       	or	r24, r25
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	89 2b       	or	r24, r25
    18ae:	9f 81       	ldd	r25, Y+7	; 0x07
    18b0:	89 2b       	or	r24, r25
    18b2:	98 85       	ldd	r25, Y+8	; 0x08
    18b4:	89 2b       	or	r24, r25
    18b6:	88 23       	and	r24, r24
    18b8:	41 f0       	breq	.+16     	; 0x18ca <BTN_getState+0x35c>
    18ba:	80 91 95 00 	lds	r24, 0x0095
    18be:	88 23       	and	r24, r24
    18c0:	21 f4       	brne	.+8      	; 0x18ca <BTN_getState+0x35c>
		{
			*enuBTNStatus = PRESSED;
    18c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    18c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    18c6:	10 82       	st	Z, r1
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <BTN_getState+0x368>
		}
		else
		{
			*enuBTNStatus = NOT_PRESSED;
    18ca:	eb 85       	ldd	r30, Y+11	; 0x0b
    18cc:	fc 85       	ldd	r31, Y+12	; 0x0c
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	80 83       	st	Z, r24
			u8_HeldFlag = 0;
    18d2:	10 92 95 00 	sts	0x0095, r1
		}//end else if
		u64_Counter = 0;
    18d6:	19 82       	std	Y+1, r1	; 0x01
    18d8:	1a 82       	std	Y+2, r1	; 0x02
    18da:	1b 82       	std	Y+3, r1	; 0x03
    18dc:	1c 82       	std	Y+4, r1	; 0x04
    18de:	1d 82       	std	Y+5, r1	; 0x05
    18e0:	1e 82       	std	Y+6, r1	; 0x06
    18e2:	1f 82       	std	Y+7, r1	; 0x07
    18e4:	18 86       	std	Y+8, r1	; 0x08

		return E_OK;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	8d 87       	std	Y+13, r24	; 0x0d
    18ea:	8d 85       	ldd	r24, Y+13	; 0x0d
	}//end else
}//end BTN_getState
    18ec:	e8 96       	adiw	r28, 0x38	; 56
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <App_Init>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to initialize the application
*************************************************************************************************/
void App_Init(void)
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    1906:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <DIO_Init>
	PWM_Init();
    190a:	0e 94 49 00 	call	0x92	; 0x92 <PWM_Init>
	BTN_Init();
    190e:	0e 94 ae 0a 	call	0x155c	; 0x155c <BTN_Init>
}//end App_Init
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <App_Update>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to update the application
*************************************************************************************************/
void App_Update(void)
{
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <App_Update+0x6>
    191e:	00 d0       	rcall	.+0      	; 0x1920 <App_Update+0x8>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <App_Update+0xa>
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	enuBTNStatus_t enuButton3State;
	static enuCarSpeed_t enuCarSpeed = SPEED_0;
	static uint8_t u8DutyCycle = 0;


	BTN_getState(BTN0, &enuButton0State);
    1926:	80 e0       	ldi	r24, 0x00	; 0
    1928:	9e 01       	movw	r18, r28
    192a:	2f 5f       	subi	r18, 0xFF	; 255
    192c:	3f 4f       	sbci	r19, 0xFF	; 255
    192e:	b9 01       	movw	r22, r18
    1930:	0e 94 b7 0a 	call	0x156e	; 0x156e <BTN_getState>
	BTN_getState(BTN1, &enuButton1State);
    1934:	9e 01       	movw	r18, r28
    1936:	2e 5f       	subi	r18, 0xFE	; 254
    1938:	3f 4f       	sbci	r19, 0xFF	; 255
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	b9 01       	movw	r22, r18
    193e:	0e 94 b7 0a 	call	0x156e	; 0x156e <BTN_getState>
	BTN_getState(BTN2, &enuButton2State);
    1942:	9e 01       	movw	r18, r28
    1944:	2d 5f       	subi	r18, 0xFD	; 253
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	b9 01       	movw	r22, r18
    194c:	0e 94 b7 0a 	call	0x156e	; 0x156e <BTN_getState>
	BTN_getState(BTN3, &enuButton3State);
    1950:	9e 01       	movw	r18, r28
    1952:	2c 5f       	subi	r18, 0xFC	; 252
    1954:	3f 4f       	sbci	r19, 0xFF	; 255
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	b9 01       	movw	r22, r18
    195a:	0e 94 b7 0a 	call	0x156e	; 0x156e <BTN_getState>
	/* Forward Direction */
	if(enuButton0State == HELD)
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	82 30       	cpi	r24, 0x02	; 2
    1962:	89 f4       	brne	.+34     	; 0x1986 <App_Update+0x6e>
	{
		DCMotor_setDirection(MOTOR1, genuMotorDirection);
    1964:	90 91 97 00 	lds	r25, 0x0097
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	69 2f       	mov	r22, r25
    196c:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DCMotor_setDirection>
		DCMotor_setDirection(MOTOR2, genuMotorDirection);
    1970:	90 91 97 00 	lds	r25, 0x0097
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	69 2f       	mov	r22, r25
    1978:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DCMotor_setDirection>
		DCMotor_setSpeed(u8DutyCycle);
    197c:	80 91 96 00 	lds	r24, 0x0096
    1980:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <DCMotor_setSpeed>
    1984:	7b c0       	rjmp	.+246    	; 0x1a7c <App_Update+0x164>
	}
	/* Turn Right */
	else if(enuButton1State == HELD)
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	61 f4       	brne	.+24     	; 0x19a4 <App_Update+0x8c>
	{
		DCMotor_setDirection(MOTOR1, FORWARD);
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DCMotor_setDirection>
		DCMotor_setDirection(MOTOR2, BACKWARD);
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DCMotor_setDirection>
		DCMotor_setSpeed(30);
    199c:	8e e1       	ldi	r24, 0x1E	; 30
    199e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <DCMotor_setSpeed>
    19a2:	6c c0       	rjmp	.+216    	; 0x1a7c <App_Update+0x164>
	}
	/*Turn Left */
	else if(enuButton2State == HELD)
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	82 30       	cpi	r24, 0x02	; 2
    19a8:	61 f4       	brne	.+24     	; 0x19c2 <App_Update+0xaa>
	{
		DCMotor_setDirection(MOTOR2, FORWARD);
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DCMotor_setDirection>
		DCMotor_setDirection(MOTOR1, BACKWARD);
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <DCMotor_setDirection>
		DCMotor_setSpeed(30);
    19ba:	8e e1       	ldi	r24, 0x1E	; 30
    19bc:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <DCMotor_setSpeed>
    19c0:	5d c0       	rjmp	.+186    	; 0x1a7c <App_Update+0x164>
	}
	/* Change Speed and Direction */
	else if(enuButton3State == PRESSED)
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	88 23       	and	r24, r24
    19c6:	09 f0       	breq	.+2      	; 0x19ca <App_Update+0xb2>
    19c8:	57 c0       	rjmp	.+174    	; 0x1a78 <App_Update+0x160>
	{
		DCMotor_stop(MOTOR1);
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	0e 94 81 0a 	call	0x1502	; 0x1502 <DCMotor_stop>
		DCMotor_stop(MOTOR2);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	0e 94 81 0a 	call	0x1502	; 0x1502 <DCMotor_stop>
		switch(enuCarSpeed)
    19d6:	80 91 60 00 	lds	r24, 0x0060
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	3e 83       	std	Y+6, r19	; 0x06
    19e0:	2d 83       	std	Y+5, r18	; 0x05
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	82 30       	cpi	r24, 0x02	; 2
    19e8:	91 05       	cpc	r25, r1
    19ea:	59 f1       	breq	.+86     	; 0x1a42 <App_Update+0x12a>
    19ec:	2d 81       	ldd	r18, Y+5	; 0x05
    19ee:	3e 81       	ldd	r19, Y+6	; 0x06
    19f0:	23 30       	cpi	r18, 0x03	; 3
    19f2:	31 05       	cpc	r19, r1
    19f4:	54 f4       	brge	.+20     	; 0x1a0a <App_Update+0xf2>
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	89 f0       	breq	.+34     	; 0x1a20 <App_Update+0x108>
    19fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1a00:	3e 81       	ldd	r19, Y+6	; 0x06
    1a02:	21 30       	cpi	r18, 0x01	; 1
    1a04:	31 05       	cpc	r19, r1
    1a06:	a1 f0       	breq	.+40     	; 0x1a30 <App_Update+0x118>
    1a08:	39 c0       	rjmp	.+114    	; 0x1a7c <App_Update+0x164>
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	91 05       	cpc	r25, r1
    1a12:	01 f1       	breq	.+64     	; 0x1a54 <App_Update+0x13c>
    1a14:	2d 81       	ldd	r18, Y+5	; 0x05
    1a16:	3e 81       	ldd	r19, Y+6	; 0x06
    1a18:	24 30       	cpi	r18, 0x04	; 4
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	21 f1       	breq	.+72     	; 0x1a66 <App_Update+0x14e>
    1a1e:	2e c0       	rjmp	.+92     	; 0x1a7c <App_Update+0x164>
		{
			case SPEED_NEG_30:
			{
				u8DutyCycle = 0;
    1a20:	10 92 96 00 	sts	0x0096, r1
				enuCarSpeed = SPEED_0;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	80 93 60 00 	sts	0x0060, r24
				genuMotorDirection = FORWARD;
    1a2a:	10 92 97 00 	sts	0x0097, r1
    1a2e:	26 c0       	rjmp	.+76     	; 0x1a7c <App_Update+0x164>
			}
			break;
			case SPEED_0:
			{
				u8DutyCycle = 30;
    1a30:	8e e1       	ldi	r24, 0x1E	; 30
    1a32:	80 93 96 00 	sts	0x0096, r24
				enuCarSpeed = SPEED_30;
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	80 93 60 00 	sts	0x0060, r24
				genuMotorDirection = FORWARD;
    1a3c:	10 92 97 00 	sts	0x0097, r1
    1a40:	1d c0       	rjmp	.+58     	; 0x1a7c <App_Update+0x164>
			}
			break;
			case SPEED_30:
			{
				u8DutyCycle = 60;
    1a42:	8c e3       	ldi	r24, 0x3C	; 60
    1a44:	80 93 96 00 	sts	0x0096, r24
				enuCarSpeed = SPEED_60;
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	80 93 60 00 	sts	0x0060, r24
				genuMotorDirection = FORWARD;
    1a4e:	10 92 97 00 	sts	0x0097, r1
    1a52:	14 c0       	rjmp	.+40     	; 0x1a7c <App_Update+0x164>
			}
			break;
			case SPEED_60:
			{
				u8DutyCycle = 90;
    1a54:	8a e5       	ldi	r24, 0x5A	; 90
    1a56:	80 93 96 00 	sts	0x0096, r24
				enuCarSpeed = SPEED_90;
    1a5a:	84 e0       	ldi	r24, 0x04	; 4
    1a5c:	80 93 60 00 	sts	0x0060, r24
				genuMotorDirection = FORWARD;
    1a60:	10 92 97 00 	sts	0x0097, r1
    1a64:	0b c0       	rjmp	.+22     	; 0x1a7c <App_Update+0x164>
			}
			break;
			case SPEED_90:
			{
				/* Toggling the direction of car movement */
				u8DutyCycle = 30;
    1a66:	8e e1       	ldi	r24, 0x1E	; 30
    1a68:	80 93 96 00 	sts	0x0096, r24
				enuCarSpeed = SPEED_NEG_30;
    1a6c:	10 92 60 00 	sts	0x0060, r1
				genuMotorDirection = BACKWARD;
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	80 93 97 00 	sts	0x0097, r24
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <App_Update+0x164>
			break;
		}
	}
	else
	{
		PWM_Stop();
    1a78:	0e 94 dd 01 	call	0x3ba	; 0x3ba <PWM_Stop>
	}
}
    1a7c:	26 96       	adiw	r28, 0x06	; 6
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <main>:
/*- INCLUDES----------------------------------------------*/
#include "Car_control_system/CAR.h"


int main(void)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    1a96:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <App_Init>

	while(1)
	{
		App_Update();
    1a9a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <App_Update>
    1a9e:	fd cf       	rjmp	.-6      	; 0x1a9a <main+0xc>

00001aa0 <__divmodhi4>:
    1aa0:	97 fb       	bst	r25, 7
    1aa2:	09 2e       	mov	r0, r25
    1aa4:	07 26       	eor	r0, r23
    1aa6:	0a d0       	rcall	.+20     	; 0x1abc <__divmodhi4_neg1>
    1aa8:	77 fd       	sbrc	r23, 7
    1aaa:	04 d0       	rcall	.+8      	; 0x1ab4 <__divmodhi4_neg2>
    1aac:	0c d0       	rcall	.+24     	; 0x1ac6 <__udivmodhi4>
    1aae:	06 d0       	rcall	.+12     	; 0x1abc <__divmodhi4_neg1>
    1ab0:	00 20       	and	r0, r0
    1ab2:	1a f4       	brpl	.+6      	; 0x1aba <__divmodhi4_exit>

00001ab4 <__divmodhi4_neg2>:
    1ab4:	70 95       	com	r23
    1ab6:	61 95       	neg	r22
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255

00001aba <__divmodhi4_exit>:
    1aba:	08 95       	ret

00001abc <__divmodhi4_neg1>:
    1abc:	f6 f7       	brtc	.-4      	; 0x1aba <__divmodhi4_exit>
    1abe:	90 95       	com	r25
    1ac0:	81 95       	neg	r24
    1ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac4:	08 95       	ret

00001ac6 <__udivmodhi4>:
    1ac6:	aa 1b       	sub	r26, r26
    1ac8:	bb 1b       	sub	r27, r27
    1aca:	51 e1       	ldi	r21, 0x11	; 17
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <__udivmodhi4_ep>

00001ace <__udivmodhi4_loop>:
    1ace:	aa 1f       	adc	r26, r26
    1ad0:	bb 1f       	adc	r27, r27
    1ad2:	a6 17       	cp	r26, r22
    1ad4:	b7 07       	cpc	r27, r23
    1ad6:	10 f0       	brcs	.+4      	; 0x1adc <__udivmodhi4_ep>
    1ad8:	a6 1b       	sub	r26, r22
    1ada:	b7 0b       	sbc	r27, r23

00001adc <__udivmodhi4_ep>:
    1adc:	88 1f       	adc	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	5a 95       	dec	r21
    1ae2:	a9 f7       	brne	.-22     	; 0x1ace <__udivmodhi4_loop>
    1ae4:	80 95       	com	r24
    1ae6:	90 95       	com	r25
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	08 95       	ret

00001aee <_exit>:
    1aee:	f8 94       	cli

00001af0 <__stop_program>:
    1af0:	ff cf       	rjmp	.-2      	; 0x1af0 <__stop_program>
